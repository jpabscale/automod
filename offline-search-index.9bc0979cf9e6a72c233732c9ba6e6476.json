[{"body":" Requirements Windows or Linux (amd64 or arm64)\nScala CLI, required to run automod\n.NET Runtime/Desktop Runtime 8, required to run UAssetCLI/FModel (see below)\nVSCode or VSCodium (optional, but highly recommended)\nTypescript (optional, only if you want to use Typescript patchlets)\nInstalling dependencies: Windows Linux winget install virtuslab.scalacli winget Microsoft.DotNet.DesktopRuntime.8 winget install OpenJS.NodeJS \u0026 :: if you want to use Typescript patchlets npm install -g typescript \u0026 :: if you want to use Typescript patchlets winget install vscodium \u0026 :: or, winget install Microsoft.VisualStudioCode curl -sSLf https://scala-cli.virtuslab.org/get | bash curl -sSLf https://dot.net/v1/dotnet-install.sh | bash curl -o- https://fnm.vercel.app/install | bash # if you want to use Typescript patchlets fnm install 24 # if you want to use Typescript patchlets npm install -g typescript # if you want to use Typescript patchlets # If snap is available, otherwise download from https://vscodium.com or https://code.visualstudio.com snap install codium --classic # or, sudo snap install code --classic Note Windows amd64 is currently the best platform to use automod on due to .NET runtime parallelization issues in Linux or arm64 (e.g., UAssetCLI sometimes fail to regenerate modified .uassets when it is used in parallel). Additional .NET runtime issues are also the reason why macOS is currently unsupported (e.g., UAssetCLI always fails to regenerate modified .uassets). Managed Tools These utility/modding tools will be automatically downloaded by automod when it is first launched:\n7-zip: a high compression archiving tool\nretoc: a fork of https://github.com/trumank/retoc that allows for handling game-specific custom format based on the game identifier.\nrepak: a fork of https://github.com/trumank/repak that allows for handling game-specific custom format based on the game identifier.\nUAssetCLI: a stripped-down, GUI-less, and multiplatform fork of https://github.com/atenfyr/UAssetGUI\njd: a JSON diff tool, useful for extracting patch files\nFModel: an Unreal Engine asset explorer, also useful for extracting patch files (only available in Windows)\nOther Useful Tools AESDumper: Unreal Game AES key extractor\nDadroit JSON Viewer: a very fast large JSON file viewer\nUE4SS: Unreal Engine scripting system, also useful for extracting .usmap files\nfor Stellar Blade: https://github.com/Chrisr0/RE-UE4SS To extract .usmap of a game, install UE4SS, launch the game, and press Ctrl + Numpad 6. If it is successful, you can find Mappings.usmap in the game’s \u003cgame-id\u003e\\Binaries\\Win64\\ue4ss folder.\nUnreal Engine Universal Signature Check Bypasser: to enable modding of Unreal Engine games with a signature check.\n","categories":"","description":"Requirements, dependencies, and other useful tools","excerpt":"Requirements, dependencies, and other useful tools","ref":"/automod/docs/getting-started/prerequisites/","tags":"","title":"Prerequisites"},{"body":" Scarlet - Fusion - Tachy - Eve Combo Moveset Skills https://www.nexusmods.com/stellarblade/mods/1329\nCarefree Mode https://www.nexusmods.com/stellarblade/mods/2328\nAll Cans - Exos - Fishes with Beta - Body Cores https://www.nexusmods.com/stellarblade/mods/2365\nDone by Others Scarlet’s Moveset for EVE’s Skillset ","categories":"","description":"https://store.steampowered.com/app/3489700/Stellar_Blade/","excerpt":"https://store.steampowered.com/app/3489700/Stellar_Blade/","ref":"/automod/docs/games/supported/stellar-blade/","tags":"","title":"Stellar Blade"},{"body":"","categories":"","description":"","excerpt":"","ref":"/automod/docs/games/supported/","tags":"","title":"Supported Games"},{"body":" The automod TOML patch files work very well for patching .uasset data tables, while providing arbitrary JSON structure manipulations using JSON Pointer or JSONPath expressions.\nThe supported TOML patch file form looks like the following:\n[obj1_Name] property1_1 = value1_1 ... ⠀ ⠀ ... ⠀ [objN_Name] propertyN_1 = valueN_1 ... The objX_Name matches the UAssetAPI’s JSON representation data table struct Name property, located inside the array expressed using the following JSON Pointer: /Exports/0/Table/Data/. For example, here is a patch file for the Stellar Blade EffectTable.uasset Drone Scan Effect Extend – DroneScanEffectExtend_30s mod by cktt12:\n# Based on https://www.nexusmods.com/stellarblade/mods/802 [N_Drone_Scan] LifeTime = 30 The N_Drone_Scan matches the object accessible at /Exports/0/Table/Data/722 and modify its LifeTime property located at /Exports/0/Table/Data/722/Value/78’s Value property to the JSON number 30 (based on Stellar Blade v1.3.2; see EffectTable.json in the .cache directory to fully appreciate the UAssetAPI JSON representation). The N_Drone_Scan object can also be expressed using the JSONPath query:\n$..[?(@.Name == 'N_Drone_Scan')] and the LifeTime object as:\n$..[?(@.Name == 'N_Drone_Scan')]..[?(@.Name == 'LifeTime')] In addition to numbers, the supported property values are TOML booleans, strings, enums (of the string form \u003cenum\u003e::\u003celement\u003e), arrays, and inline tables (for representing JSON objects).\nEach patch file should be named as the corresponding .uasset target filename, but it should be suffixed using the .toml file extension instead. For example, the above patch file example for Stellar Blade’s EffectTable.uasset should be named as EffectTable.toml.⠀\nRegular Expression and Polyglot Patchlet Stellar Blade EffectTable.toml: Regex+Scala +Typescript +Javascript +Python +Lua ['.*: ^Gear_.*_HitDmgUp.*$'] #1 CalculationMultipleValue = 0.5 [ '=\u003e v.startsWith(\"Gear_\") \u0026\u0026 !v.contains(\"_HitDmgUp\")' ] #2 CalculationMultipleValue = 2 [ '=\u003e Note: Doubling gear (beneficial) effectiveness' ] #3 '=\u003e' = '''{ if (!v.startsWith(\"Gear_\")) return false !v.contains(\"_HitDmgUp\") }''' CalculationValue = '=\u003e v.orig[ Double ] * 2' ['.*: ^Gear_.*_HitDmgUp.*$'] #1 CalculationMultipleValue = 0.5 [ '=ts\u003e v.startsWith(\"Gear_\") \u0026\u0026 !v.includes(\"_HitDmgUp\")' ] #2 CalculationMultipleValue = 2 [ '=ts\u003e Note: Doubling gear (beneficial) effectiveness' ] #3 '=ts\u003e' = ''' !v.startsWith(\"Gear_\")? false : !v.includes(\"_HitDmgUp\") ''' CalculationValue = '=ts\u003e v.orig() * 2' ['.*: ^Gear_.*_HitDmgUp.*$'] #1 CalculationMultipleValue = 0.5 [ '=js\u003e v.startsWith(\"Gear_\") \u0026\u0026 !v.includes(\"_HitDmgUp\")' ] #2 CalculationMultipleValue = 2 [ '=js\u003e Note: Doubling gear (beneficial) effectiveness' ] #3 '=js\u003e' = ''' !v.startsWith(\"Gear_\")? false : !v.includes(\"_HitDmgUp\") ''' CalculationValue = '=js\u003e v.orig() * 2' ['.*: ^Gear_.*_HitDmgUp.*$'] #1 CalculationMultipleValue = 0.5 [ '=py\u003e v.startswith(\"Gear_\") and (\"_HitDmgUp\" not in v)' ] #2 CalculationMultipleValue = 2 [ '=py\u003e Note: Doubling gear (beneficial) effectiveness' ] #3 '=py\u003e' = ''' False if not v.startswith(\"Gear_\") else \"_HitDmgUp\" not in v ''' CalculationValue = '=py\u003e v.orig() * 2' ['.*: ^Gear_.*_HitDmgUp.*$'] #1 CalculationMultipleValue = 0.5 [ '=lua\u003e return (v:find(\"^\" .. \"Gear_\") == 1) and (v:find(\"_HitDmgUp\") == nil)' ] #2 CalculationMultipleValue = 2 [ '=lua\u003e Note: Doubling gear (beneficial) effectiveness' ] #3 '=lua\u003e' = ''' if v:find(\"^\" .. \"Gear_\") == nil then return false else return v:find(\"_HitDmgUp\") == nil end ''' CalculationValue = '=lua\u003e return v.orig * 2' The Java regular expression (regex) syntax can be used to match object names in bulk, using the TOML literal string with the automod .*: prefix (#1). You can also use a polyglot patchlet – any Scala/Typescript/Javascript/Python 3/Lua 5.2 code to match object names using the =\u003e/=ts\u003e/=js\u003e/=py\u003e/=lua\u003e prefixes, with the predefined variable v holding the value of the object name string (#2).\nTOML does not allow a multiline (literal) string inside the square brackets for matching object names; so, an alternative syntax is supported to allow for a complex code to match them. That is, the object name matcher is still prefixed by =\u003e/=ts\u003e/=js\u003e/=py\u003e/=lua\u003e, but what follows is (or can be) a description of the patchlet. The actual code is specified under a special property name =\u003e/=ts\u003e/=js\u003e/=py\u003e/=lua\u003e that maps to the Scala expression/code block to match object names (#3).\nExample #3 also shows how to update a property value based on its original game value: v.orig[Double] * 2 (or v.orig() * 2 for non-Scala ones), prefixed by =\u003e/=ts\u003e/=js\u003e/=py\u003e/=lua\u003e. In this case, the variable v holds the API to access the original value whose expected type must be supplied (e.g., Double). A variant of the above is used to create the effect-table demo mod (see automod’s patches\\.all-in-one-patches\\*987*\\EffectTable.toml). Here is another example that is a bit more complicated (see patches\\.all-in-one-patches\\*1329* for more):\nStellar Blade EffectTable.toml: Regex+Scala +Typescript +Javascript +Python +Lua ['.*: ^P_Eve_Fusion_Skill_.*_Finish.*$'] StartSelfEffect = '''=\u003e { val newArray = JsonNodeFactory.instance.arrayNode newArray.add(toJsonNode(\"\"\"{ \"Alias\": \"NoReactionSlug_Step\" }\"\"\")) Option(v.currentOpt[String].get) match { case Some(value) =\u003e val array = toJsonNodeT[ArrayNode](value) for (i \u003c- 0 until array.size) array.get(i).get(\"Alias\").asText match { case \"NoReactionSlug_Step\" | \"BlockAction_Step\" =\u003e case _ =\u003e newArray.add(array.get(i)) } case _ =\u003e } newArray.toString }''' ['.*: ^P_Eve_Fusion_Skill_.*_Finish.*$'] StartSelfEffect = '''=ts\u003e //JsonNode predefined as: // type JsonNode = { [key: string]: any; } let newArray: JsonNode[] = []; newArray.push({ \"Alias\": \"NoReactionSlug_Step\" }); let array: JsonNode[] = JSON.parse(String(v.current())); if (array != null) { for (let i = 0; i \u003c array.length; i++) { switch(array[i].Alias) { case \"NoReactionSlug_Step\": case \"BlockAction_Step\": break; default: newArray.push(array[i]); } } } JSON.stringify(newArray) ''' ['.*: ^P_Eve_Fusion_Skill_.*_Finish.*$'] StartSelfEffect = '''=js\u003e let newArray = []; newArray.push({ \"Alias\": \"NoReactionSlug_Step\" }); let array = JSON.parse(v.current()); if (array != null) { for (let i = 0; i \u003c array.length; i++) { switch(array[i].Alias) { case \"NoReactionSlug_Step\": case \"BlockAction_Step\": break; default: newArray.push(array[i]); } } } JSON.stringify(newArray) ''' ['.*: ^P_Eve_Fusion_Skill_.*_Finish.*$'] StartSelfEffect = '''=py\u003e import json newArray = [] newArray.append({ \"Alias\": \"NoReactionSlug_Step\" }) array = json.loads(v.current()) if v.current() is not None else None if array is not None: for e in array: match e.get(\"Alias\"): case \"NoReactionSlug_Step\": pass case \"BlockAction_Step\": pass case _: newArray.append(e) json.dumps(newArray) ''' ['.*: ^P_Eve_Fusion_Skill_.*_Finish.*$'] StartSelfEffect = '''=lua\u003e newArray = {} newArray[1] = { [\"Alias\"] = \"NoReactionSlug_Step\" } array = JSON.parse(v.current) if (array ~= nil) then j = 2 for _, e in ipairs(array) do if (not (e.Alias == \"NoReactionSlug_Step\" or e.Alias == \"BlockAction_Step\")) then newArray[j] = e j = j + 1 end end end r = JSON.stringify(newArray) return r ''' The v.currentOpt (or v.current()) method retrieves the property value after the preceding patches have been applied, which can be used to incrementally arrange patches (see the Patch Auto-Merging section for patch ordering information). Also, as can be observed, arbitrarily complex Scala code can be embedded in the patchlet. Debugging such complex code might be a challenge as there is no debugger facility for it. However, one can still resort to the “old school” logging (i.e., printing to the console inside patchlets). In general, you can access any object property value in the same .uasset by using the v.valueOf method. Here are the CodeContext or PolyCodeContext object API for v:\nProperty value patchlet API for v: Scala Others (as Typescript) type CodeContext = { def objName: String def orig[T]: T def currentOpt[T]: Option[T] def valueOf[T](objName: String, property: String): Option[T] def ast: com.fasterxml.jackson.databind.JsonNode def origAst: com.fasterxml.jackson.databind.JsonNode } type JsonNode = { [key: string]: any } interface PolyCodeContext { objName(): string orig(): any current(): any | undefined ast(): JsonNode origAst(): JsonNode valueOf(objName: string, property: string): any | undefined } Note that each patchlet is dynamically loaded, compiled, and run each time it is applied, thus it does take time to perform compared to regular exact match/value patches or regex-based.\nAs previously mentioned before, complex property value types are supported using TOML inline table and array syntax. For example, the following patch file is what the Stellar Blade Altess Levoire and Abyss Levoire can use sword and scanner – Levoire_Use_Sword v1.0.0 mod by Violetkylin does, i.e., removing sword/drone scan restrictions (P_Eve_Stance_BlockSword/N_Drone_BlockScan name properties) in the Altess/Abyss Levoire EnterZoneEffects array property value, while still disallowing fishing (P_Eve_BlockFishingMode):\n# Based on https://www.nexusmods.com/stellarblade/mods/1660 [Zone_ATL_01] EnterZoneEffects = [ { \"Name\" = \"2\", \"$type\" = \"UAssetAPI.PropertyTypes.Objects.NamePropertyData, UAssetAPI\", \"ArrayIndex\" = 0.0, \"Value\" = \"P_Eve_BlockFishingMode\", \"PropertyTagExtensions\" = \"NoExtension\", \"IsZero\" = false, \"PropertyTagFlags\" = \"None\" } ] [Zone_ATL_02] EnterZoneEffects = [ { \"Name\" = \"2\", \"$type\" = \"UAssetAPI.PropertyTypes.Objects.NamePropertyData, UAssetAPI\", \"ArrayIndex\" = 0.0, \"Value\" = \"P_Eve_BlockFishingMode\", \"PropertyTagExtensions\" = \"NoExtension\", \"IsZero\" = false, \"PropertyTagFlags\" = \"None\" } ] [Zone_ATL_03] EnterZoneEffects = [ { \"Name\" = \"2\", \"$type\" = \"UAssetAPI.PropertyTypes.Objects.NamePropertyData, UAssetAPI\", \"ArrayIndex\" = 0.0, \"Value\" = \"P_Eve_BlockFishingMode\", \"PropertyTagExtensions\" = \"NoExtension\", \"IsZero\" = false, \"PropertyTagFlags\" = \"None\" } ] [Zone_AYL_01] EnterZoneEffects = [ { \"Name\" = \"2\", \"$type\" = \"UAssetAPI.PropertyTypes.Objects.NamePropertyData, UAssetAPI\", \"ArrayIndex\" = 0.0, \"Value\" = \"P_Eve_BlockFishingMode\", \"PropertyTagExtensions\" = \"NoExtension\", \"IsZero\" = false, \"PropertyTagFlags\" = \"None\" } ] [Zone_AYL_02] EnterZoneEffects = [ { \"Name\" = \"2\", \"$type\" = \"UAssetAPI.PropertyTypes.Objects.NamePropertyData, UAssetAPI\", \"ArrayIndex\" = 0.0, \"Value\" = \"P_Eve_BlockFishingMode\", \"PropertyTagExtensions\" = \"NoExtension\", \"IsZero\" = false, \"PropertyTagFlags\" = \"None\" } ] [Zone_AYL_03] EnterZoneEffects = [ { \"Name\" = \"2\", \"$type\" = \"UAssetAPI.PropertyTypes.Objects.NamePropertyData, UAssetAPI\", \"ArrayIndex\" = 0.0, \"Value\" = \"P_Eve_BlockFishingMode\", \"PropertyTagExtensions\" = \"NoExtension\", \"IsZero\" = false, \"PropertyTagFlags\" = \"None\" } ] [Zone_AYL_04] EnterZoneEffects = [ { \"Name\" = \"2\", \"$type\" = \"UAssetAPI.PropertyTypes.Objects.NamePropertyData, UAssetAPI\", \"ArrayIndex\" = 0.0, \"Value\" = \"P_Eve_BlockFishingMode\", \"PropertyTagExtensions\" = \"NoExtension\", \"IsZero\" = false, \"PropertyTagFlags\" = \"None\" } ] [Zone_AYL_05] EnterZoneEffects = [ { \"Name\" = \"2\", \"$type\" = \"UAssetAPI.PropertyTypes.Objects.NamePropertyData, UAssetAPI\", \"ArrayIndex\" = 0.0, \"Value\" = \"P_Eve_BlockFishingMode\", \"PropertyTagExtensions\" = \"NoExtension\", \"IsZero\" = false, \"PropertyTagFlags\" = \"None\" } ] [Zone_AYL_06] EnterZoneEffects = [ { \"Name\" = \"2\", \"$type\" = \"UAssetAPI.PropertyTypes.Objects.NamePropertyData, UAssetAPI\", \"ArrayIndex\" = 0.0, \"Value\" = \"P_Eve_BlockFishingMode\", \"PropertyTagExtensions\" = \"NoExtension\", \"IsZero\" = false, \"PropertyTagFlags\" = \"None\" } ] Instead of typing all that, however, it is a lot less effort to use a regex/patchlet combination:\nStellar Blade ZoneTable.toml: Regex+Scala +Typescript +Javascript +Python +Lua ['.*: ^Zone_A(T|Y)L.*$'] EnterZoneEffects = '''=\u003e { var newArray = Seq[Map[String, Any]]() for (m \u003c- v.orig[Seq[Map[String, Any]]]) m(\"Value\") match { case \"P_Eve_Stance_BlockSword\" | \"N_Drone_BlockScan\" =\u003e case _ =\u003e newArray +:= m } newArray }''' ['.*: ^Zone_A(T|Y)L.*$'] EnterZoneEffects = '''=ts\u003e let newArray: JsonNode[] = []; for (const m of (v.orig() as JsonNode[])) switch(m.Value) { case \"P_Eve_Stance_BlockSword\": case \"N_Drone_BlockScan\": break; default: newArray.push(m) } newArray ''' ['.*: ^Zone_A(T|Y)L.*$'] EnterZoneEffects = '''=js\u003e let newArray = []; for (const m of v.orig()) switch(m.Value) { case \"P_Eve_Stance_BlockSword\": case \"N_Drone_BlockScan\": break; default: newArray.push(m) } newArray ''' ['.*: ^Zone_A(T|Y)L.*$'] EnterZoneEffects = '''=py\u003e newArray = [] for m in v.orig(): match m.get(\"Value\"): case \"P_Eve_Stance_BlockSword\": pass case \"N_Drone_BlockScan\": pass case _: newArray.append(m) newArray ''' ['.*: ^Zone_A(T|Y)L.*$'] EnterZoneEffects = '''=lua\u003e newArray = {} j = 1 for _, m in ipairs(v.orig) do if (not (m.Value == \"P_Eve_Stance_BlockSword\" or m.Value == \"N_Drone_BlockScan\")) then newArray[j] = m j = j + 1 end end return newArray ''' As you can observe, an is represented using the patchlet language sequence/array and an object as a map, and the patchlet facility takes care of the type conversions between the two representations for each supported patchlet language.\nJSON Pointer and JSONPath In addition to using regex and Scala code to find data table objects, you can also access any object via its JSON Pointer path. The path should be prefixed with .@:, for example, the following updates the distance of drone scanning in TargetFilterTable.uasset:\n# Based on https://www.nexusmods.com/stellarblade/mods/802 ['.@: /Exports/0/Table/Data/459'] FarDistance = 30000 TargetCheckValue1 = 3000 ['.@: /Exports/0/Table/Data/460'] FarDistance = 30000 TargetCheckValue1 = 3000 Note that the JSON Pointer path should resolve to a JSON object:\nautomod first checks whether it has an array field named Value (i.e., a UAssetAPI JSON struct object), if so, it updates struct properties according to the UAssetAPI JSON schema. otherwise, it updates the object property directly; an error is raised if the property name is not present (to prevent unintended patching). While JSON Pointer is very precise for accessing objects in any JSON structure, a better alternative is to use JSONPath (with the specific implementation done using JsonPath). For example, here is a (better) JSONPath equivalent to the TargetFilterTable.uasset modifications above:\n# Based on https://www.nexusmods.com/stellarblade/mods/1660 ['.@: $..[?(@.Name =~ /N_Drone_Normal_Scan1_1_Target.*/)]'] FarDistance = 30000 TargetCheckValue1 = 3000 Also, to make the same DifficultyStatGroupTable.uasset modifications as the Stellar Blade Hard Mode More Health and Shield for All Enemies – Hard Mode Enemies More Life and Shield x6 values by ElBibu256:\n# Based on https://www.nexusmods.com/stellarblade/mods/802 ['.@: $..Data[16:32]'] StatValue4 = '=\u003e v.orig[Double] * 6' StatValue5 = '=\u003e v.orig[Double] * 6' ['.@: $..Data[60:87]'] StatValue4 = '=\u003e if (v.objName == \"324\" | v.objName == \"327\") 420 else v.orig[Double] * 6' StatValue5 = '=\u003e if (v.objName == \"324\" | v.objName == \"327\") 420 else v.orig[Double] * 6' Note that any text/character after .@: and before $ or / is ignored so it can be used for documentation. Also, it is best to use regex/patchlet for patching data tables and use .@: for other kinds. For example, the following hard-er mode patchlet is better than the .@: equivalent above:\n# Based on https://www.nexusmods.com/stellarblade/mods/1156 ['=\u003e Multiply HP/SH on objects 17-32 and 301-327 by 6, and object 324 \u0026 327 to 420/420.'] '=\u003e' = '''v.toIntOption match { case Some(n) =\u003e (17 \u003c= n \u0026\u0026 n \u003c= 32) | (301 \u003c= n \u0026\u0026 n \u003c= 327) case _ =\u003e false }''' StatValue4 = '=\u003e if (v.objName == \"324\" | v.objName == \"327\") 420 else v.orig[Double] * 6' StatValue5 = '=\u003e if (v.objName == \"324\" | v.objName == \"327\") 420 else v.orig[Double] * 6' ","categories":"","description":"Supported TOML form, JSON pointer, JSONPath, regex, and polyglot patchlet","excerpt":"Supported TOML form, JSON pointer, JSONPath, regex, and polyglot …","ref":"/automod/docs/guide/toml-patch-file-schema/","tags":"","title":"TOML Patch File Schema"},{"body":" Release Changes 3.3.5 Prefix license files with the mod name when packaging mods. Lazily use original value in property patching. Fixed patching .@ object property. 3.3.4 Fixed .diff[.into] .toml output. Fixed detection of .@ data table path. Handled non-existent UAssetAPI struct in original AST. Updated SB patches. Upgraded retoc. 3.3.3 Fixed handling enum value when :: is required. Fixed handling of non-existent property. Added Wanted: Dead game config. Upgraded retoc. 3.3.2 Upgraded UAssetCLI. Added more Kena Carefree mod without attack/charm buffs. Reorganized SB patches and character table without lifesteal and shield regen buff. Upgraded retoc. Download the latest FModel dev commit sha. Further refined .@ UAssetAPI Struct check. 3.3.1 Fixed license file copy target folder. Updated SB and patches/SB/.no-fall-damage. Changed .demo.sb AIOs to include no-fall-damage. Added Kena: Bridge of Spirits. 3.3.0 Added -c opt to include license files in generated mod(s). Added support for empty mapURI. Added support for uasset filter path using $ for /. Further refined .@ UAssetAPI Struct check. Added support for Sword and Fairy 7. 3.2.5 Fixed possible NPE in logging. Made .search.flat returns ordered string set if the query result is all Strings. Upgraded SB. 3.2.4 Added .search.flat and fixed .search result resolved path typo. 3.2.3 Fixed another .@ data table detection issue. Made .batch to ignore folders whose name starts with dot (.). Set log line limit to 1024 chars. 3.2.2 Fixed .@ data table detection. Parallelized .@ patching. Buffered logging. Added support for JsonNode passthrough in Scala patchlet. 3.2.1 Fixed possible NPE in .@ patchlet. Added jd context menu command on two selected .json files in VSCode file explorer. 3.2.0 Separated automod installation directory from automod general settings in VSCode extension (require resetting automod general settings). Changed automod general settings target to Workspace. Added .@ patchlet support. Package mod under LogicMods directory if the mod name starts with “LogicMods.”. Lazily download .cache. Updated patches\\SB 1329 to v2.9. 3.1.1 Fixed VSCode extension automod .config.json import and refresh workspace after writing/backing up .config.json. Fixed .upgrade. Use automod shell scripts when launching from VSCode. Download luaj from luaj GitHub’s release in automod shell scripts (instead of using jitpack.io). Added readme.md and updated .gitignore. 3.1.0 Added Lua patchlet support. Added .batch and .upgrade commands. Added Lost Soul Aside patch files for .batch. Only download VSCode extension on .setup.vscode. Refined .@ UAssetAPI Struct check. Fixed empty mapUri handling. 3.0.1 Added support for uncompressed usmap URI. Generalized .@ so it can be used for patching any JSON object node. 3.0.0 Fixed repak installation. Fixed missing AES key retoc/repak argument. Fixed .config.json loading. Fixed handling of .@: in .toml and .toml.all Fixed .search (broken after .cache reorganization), and improved it by adding resolved path of each query result. Reorganized .config.json and VSCode settings. Changed to download usmap, .cache, and VSCode extension from automod releases. Removed scala-metals in .setup.vscode. Removed AUTOMOD_XXX env vars and updated CLI to accepts game id, no par, and max logs. 2.9.2 Changed to use Oracle GraalVM v24 (instead of scala-cli’s default JVM). Added Typescript, Javascript, and Python 3 patchlet support by using GraalJs and GraalPy (see the updated description). 2.9.1 Fixed a race condition in patching parallelization. Fixed VSCode extension config changes detection. Restored sorting of object patches based on their name in .toml and .toml.all outputs. Added repak pack options in .config.json (e.g., for setting compression method and .pak version). AIOs: updated to use 1329 v2.8c scarlet godqueen. 2.9.0 Fixed null handling in property value patchlet JSON object deserialization. Fixed newlines in .log files. Changed to use a forked retoc that accepts a game identifier option that can be used to handle games with a customized format. Added support for legacy .pak format using a forked repak (which also accepts a game identifier). Added a mechanism to weekly check for updated .cache if mapURI is a UAsssetCLI release URL (currently disabled). Added .demo.soa to generate a demonstration mod for Sands of Aura (that uses the legacy .pak format). 2.8.1 Changed to download .usmap and .cache from UAsssetCLI releases instead of being bundled in the automod main distribution (.cache is downloaded only if mapURI is set to a UAssetCLI release URL, which is the default). Enabled automod to be used from any directory/VSCode workspace folder, so only one automod installation is needed for working on different mods. Added automod directory setting in VSCode extension (automatically filled if automod has been run once, e.g., .setup.vscode). Layered .cache of .uasset JSONs: (1) try using .cache in the current working directory/workspace folder, and (2) if no game directory is provided and usmap is set to a UAssetCLI release URL, try using .cache in the automod installation directory. Similarly, .config.json loading is layered as well (note: it is best to use Workspace settings in VSCode instead of User settings). Replaced automod.exe with automod.cmd and automod shell scripts, and changed .demo.sb to use scala-cli. 2.8.0 Changed to use UAssetCLI – a GUI-less stripped-down version of UAssetGUI in order to support multi-platform. Added support for Windows arm64 and Linux amd64/arm64, but with .uasset extraction/regeneration parallelization disabled due to .NET 8 issues (macOS is unsupported due to even worse .NET issues). Added more patching parallelization for better performance (always on for all platforms). 2.7.1 Fixed VSCode extension mod generation command. Relaxed handling of AES key (accepts with/without 0x) and added options to skip shaders when calling retoc. Fixed error handling when retoc does not produce any .uasset. 2.7.0 Changed sbmod to automod (VSCode settings are also renamed to automod). Fixed default mapURI. Included all StellarBlade data tables in .cache. Added a new launcher automod.exe replacing automod.bat (use -s to disable scala-cli server mode). Made the game directory optional and use scala-cli server as the default setting in VSCode extension. 2.6.0 Fixed a rare file exists exception issue when parallelization is used. Generalized/preserved .uasset path in JSON extraction/regeneration. Enriched property value patchlet API with ast/origAst methods to retrieve the current/original .uasset JSON ASTs. Changed AUTOMOD_NO_PAR to “true” for disabling parallelization. Changed mapUrl in .config.json to mapUri to support absolute (using file://) or relative .usmap location already in the filesystem. Always print header info (which now includes parallelization mode and max logs info) when running commands. Included StellarBlade_1.3.1.usmap and some cached .uasset JSON files, and changed to use .7z for the main distribution (to uncompress, use: 7-zip.org). Made game directory optional in the command line interface (try to use cached .uasset JSON if not provided). Added –include-patches and .7z –ultra-compression mod generation options. Added no parallelization, max logs, include patches, and ultra compression settings in VSCode extension. Removed .code command and replaced patchSB.sc with TOML patch files and changed .demo.sb to use .hard from 1329. Demo mods: rebuilt for Stellar Blade v1.3.1; effect-table has been moved to 1329. 2.5.1 Log patching detail to .log files instead of console (keeping the last 30 task logs, which can be overriden by defining AUTOMOD_MAX_LOGS env var to a different number). Improved performance by parallelizing .uasset/.json extractions, patching, and .uasset regenerations (can be disabled by defining the AUTOMOD_NO_PAR env var to any value). Added unification of .@: data table patches (detected based on their JSON Pointer or resolved JSONPath prefix). AIO changes: updated to use 1329 v2.7c scarlet godqueen. 2.5.0 Made .@: patches preserved (including their load order) by .toml and .toml.all so .@: can be applied generally (e.g., for non data tables). Removed .demo, .demo.aio, .demo.aio.hard, and .demo.effect, and renamed .demo.all as .demo.sb. Moved Stellar Blade patches to patches\\sb. AIOs: updated to use 1329 v2.7 scarlet godqueen; simplified 1156 patching to use an object name patchlet. 2.4.5 Fixed property value patchlet handling when the curent value (v.currentOpt) is null. Changed to use 7-zip for compressing/uncompressing archives. AIOs: updated to use 1329 v2.6 scarlet godqueen. 2.4.4 Fixed UAssetGUI-breaking ‘… :: …’ enum property value patching. Added support for general UAssetAPI JSON objects and arrays for property value patching (use inline tables/objects in TOML). Added a more helpful message in the case UAssetGUI fails to repack .uasset. AIOs: updated to use 1329 v2.2 godqueen; effect-table: made Gold Gears as heal-on-hit. 2.4.3 Fixed regex/patchlet merging wrt. patch file load order. Fixed null properly value handling when loading patch files. Removed .demo.aio.base[.hard] because 1329 v2 work for both the base game and NG+. AIOs: Updated to use 1329 v2.0; effect-table: ignored desert quicksand and reduced Tachy gauge consumption to 20%. 2.4.2 Various fixes for .toml/.toml.all and property value patchlets. Added .demo.all to generate all demo mods in one go. AIOs: updated to use 1329 v1.3. 2.4.1 Fixed .uasset JSON redundant patching. Added JSON API (serialization/deserialization, etc.) to property value patchlets useful for manipulating embedded JSON data inside string values (e.g., StartSelfEffect in SkillActiveStepTable). AIO and effect-table: fixed _MK2 gear effectiveness (fixed from quadruple to double). 2.4.0 Added support for JSONPath in TOML patch files to enable flexible patching of general UAssetAPI JSON struct objects (see the updated TOML patch file schema description). Added .search to test JSONPath expressions on .uassets. Added .demo.aio.hard and .demo.aio.base.hard mods that incorporate 1156 6x hard-er mode, but done using JSONPath (see patches.all-in-one-patches*987*.hard\\DifficultyStatGroupTable.toml). Demo mods: no changes beside the new hard-er ones. 2.3.1 Added .demo.effect to create the effect-table demo mod consisting only the AIO EffectTable changes (see patches.all-in-one-patches*987*\\EffectTable.toml). Even better .toml and .toml.all that work well with regex/patchlets and always print the game original property values as comments in the generated TOML patch files (as a consequence, .toml now requires the game directory as well). Better error messages when patchlets fail to evaluate. Added some (ever so slightly) more helpful messages when retoc and UAssetGUI fail. AIO: added more EffectTable changes. 2.3.0 Added support to use Java regular expression syntax in TOML patch files for matching object names. Added support to use “patchlet” – any general Scala code expression/block to match object names, as well as for updating property values (with API to access the original game property value, or any original property value in the same .uasset.) Added the –dry-run option to test patches without generating a mod. AIO: updated to use 1329 v1.1. 2.2.3 Cached tool downloads in Windows Temp dir to reduce bandwidth. Added the –no-code-patching mod generation CLI option to skip code patching without modifying any script code. Reorganized folders to tidy up top-level folder. Introduced a dedicated patchCustom.sc file for users to customize the script to ease upgrading automod with existing custom code patches. Added UAssetApi.sc to ease creation of UAssetApi JSON objects. Added TOML inline tables and arrays as TOML patch values (for custom scripting code, for now). Added .extra patches (not included in demo mods). AIO: changed moveset/skills to use patches for 1329. Added .demo.aio.base to create AIO demo mod for the base gameplay (and NG+). 2.2.2 Added AES game key config. Made more robust in handling some exceptional cases. Refactored script code for readability. Added .demo and .demo.aio to conveniently reproduce demo mods. AIO: replaced Tempest with fusion chain-stab and Overdrive with fusion sword aura; adjusted burst damages. 2.2.1 More VSCode fixes. Added automod.bat auto-generation during the first launch. Included all-in-one-patches and all-in-one-code-patches-unified in the main distribution, but disabled by default using names with a leading dot (.). 2.2.0 Cached .uasset JSON to speed up subsequent runs if all of the files in the Paks directory have not been modified (based on each file’s last modified time and retoc/UAssetGUI versions). Improved VSCode .config.json handling. Refactored sbmod.sc into separate files. 2.1.1 Made the patch loader to ignore files/folders whose name starts with a dot (.) in the patches directory. Prioritized to use a JSON configuration file for some game and tool information (e.g., usmap URL, UE and modding tool versions, etc.) that can be edited directly/via VSCode settings. 2.1.0 Added .diff.into command and .code support for .toml. Better patch form check and other improvements. 2.0.1 Fixed a critical bug in VSCode extension. 2.0.0 Added VSCode extension. [sigh, very broken; archived] 1.9 Fixed .toml.all and usage checks. 1.8 Added more jd patch form processing. Better TOML output. Added .toml.all command. 1.7 Better usage \u0026 patch form checks and some fixes. 1.6 Added .toml and .diff command with some bug fixes. 1.5 Added dynamic patch file loading. Fixed a breaking bug in v1.3 and v1.4. 1.4 Added script code generation from a jd patch file. [Broken; don’t use]. 1.3 Added FModel and jd setup, printing diff patch messages, and another uasset example to illustrate multiple uasset editing in a single mod. [Broken; don’t use]. 1.2 Added customization hint comments and another property update example, as well as some clean up and simplification refactoring. 1.1 Updated .usmap URL and other minor tweaks. 1.0 Initial version. ","categories":"","description":"Release changelog","excerpt":"Release changelog","ref":"/automod/docs/changelog/","tags":"","title":"Changelog"},{"body":"","categories":"","description":"","excerpt":"","ref":"/automod/docs/games/compatible/","tags":"","title":"Compatible Games"},{"body":"","categories":"","description":"Prerequisites, setting up automod, and using its VSCode extension","excerpt":"Prerequisites, setting up automod, and using its VSCode extension","ref":"/automod/docs/getting-started/","tags":"","title":"Getting Started"},{"body":" To further lessen the programming activity required when modding using the auto script, it supports dynamic loading of patch files described above. All patch files should be placed inside the patches directory of the script working directory. They can be organized in a hierarchy of tree-structured folders.\nThe script loads them in a depth-first orderly manner to provide a systematic, convention-based patch merging method. That is, patch files/directories at the same level are loaded/traversed based on their string name ordering, and patch files at lower levels will be loaded after their ancestors.\nNote that files/folders whose name starts with a dot (.) are ignored to conveniently enable/disable patch files.\nFor example, for the following patches folder/file structure:\nThe loading and patch application ordering is as follows:\npatches\\EffectTable.toml\npatches\\1\\EffectTable.toml\npatches\\2\\EffectTable.toml\nwith patches\\3\\.EffectTable.toml ignored.\n","categories":"","description":"Dynamic patch loading, ordering, and auto-merging","excerpt":"Dynamic patch loading, ordering, and auto-merging","ref":"/automod/docs/guide/patch-auto-merging/","tags":"","title":"Patch Auto-Merging Approach"},{"body":" Carefree Mode https://www.nexusmods.com/sandsofaura/mods/3\n","categories":"","description":"https://store.steampowered.com/app/1119840/Sands_of_Aura/","excerpt":"https://store.steampowered.com/app/1119840/Sands_of_Aura/","ref":"/automod/docs/games/supported/sands-of-aura/","tags":"","title":"Sands of Aura"},{"body":" Setting up and running automod: Windows Linux curl -JLo automod.zip https://codeload.github.com/jpabscale/automod/legacy.zip/master tar xf automod.zip move jpabscale-automod-* automod del automod.zip cd automod \u0026 :: change to uncompressed directory if downloaded as a zip file automod .demo.sb \u0026 :: generate Stellar Blade demonstration mods automod .demo.soa \u0026 :: generate Sand of Aura demonstration mod automod .setup.vscode \u0026 :: or, automod .setup curl -JLo automod.tar.gz https://codeload.github.com/jpabscale/automod/legacy.tar.gz/master tar xf automod.tar.gz mv jpabscale-automod* automod rm automod.tar.gz cd automod # change to uncompressed directory if downloaded as a zip file ./automod .demo.sb # generate Stellar Blade demonstration mods ./automod .demo.soa # generate Sand of Aura demonstration mod ./automod .setup.vscode # or, ./automod .setup As it generates a mod (e.g., .demo.sb or .demo.soa), automod uses retoc/repak to extract legacy .uasset/.uexp files, converts them to UAssetAPI .json format using UAssetCLI, programmatically patches the .json file, converts the patched .json file back to .uasset/.uexp using UAssetCLI, and then to .utoc/.ucas/.pak using retoc/repak.\nAt the end of the mod generation, it will create a \u003cmod-name\u003e.zip (or \u003cmod-name\u003e.7z) archive file containing the .utoc/.ucas/.pak files that can be uncompressed inside ...\\\u003cgame-folder\u003e\\\u003cgame-id\u003e\\Content\\Paks\\~mods (or ...\\Paks\\LogicMods) , manually or managed by using a mod manager.\nUpgrading automod Upgrading automod: Windows Linux automod .upgrade ./automod .upgrade ","categories":"","description":"Downloading, running, and upgrading automod","excerpt":"Downloading, running, and upgrading automod","ref":"/automod/docs/getting-started/setup/","tags":"","title":"Setup"},{"body":" Displaying CLI usage: Windows Linux automod ./automod Auto Modding Script v3.3.5 Usage: automod [-s] opt* [ \u003cmod-name\u003e option* | .batch option* | .demo.[sb|soa] | .diff[.into] \u003cfrom-path\u003e \u003cto-path\u003e \u003cout-path\u003e | .search[.flat] \u003cpaths-input\u003e.sam \u003cout-path\u003e | .setup[.vscode [ \u003cpath-to-vscode\u003e ]] | .toml[.all] \u003cout-path\u003e | .upgrade ] -s Disable Scala CLI server opt: -g \u003cgame-id\u003e Active game identifier (default: SB) -l \u003cnum\u003e Maximum task logs to keep (default: 30) -p Disable parallelization -c \u003clicense-path\u003e Include license file(s) in the generated mod option: --dry-run Disable actual mod generation and just test patches --include-patches Include patches in the generated mod --no-code-patching Disable code patching --ultra-compression Use 7z ultra compression .batch Generate a mod for each sub-folder in patches\\\u003cgame-id\u003e .demo.sb Generate all Stellar Blade demonstration mods .demo.soa Generate Sands of Aura demonstration mod .diff Recursively diff JSON files and write jd and TOML patch files .diff.into Use .diff between \u003cfrom-path\u003e with each sub-folder of \u003cto-path\u003e .search Query UAssetAPI JSON files using the JSONPaths in \u003cpaths-input\u003e .search.flat Same as .search but without resolved paths in a single array result .setup Only set up modding tools .setup.vscode Set up modding tools and VSCode extensions .toml Merge existing patch files in patches as TOML patch files .toml.all Merge script code patches with patch files in patches as TOML .upgrade Upgrade automod to the latest version Disabling the Scala CLI server (-s) reduces the number of dependencies that Scala CLI downloads, thus saving bandwidth. However, it will be slower to use because of the Java Virtual Machine (JVM) cold boot time.\nGame identifier is the folder name immediately containing Content\\Paks.\nAs mentioned above, UAssetCLI call parallelization is disabled (-p) on Linux or arm64, but .uasset JSON object patching is always parallelized as it is executed on the JVM.\nGame information (e.g., game directory) is stored in .config.json\n","categories":"","description":"CLI usage information","excerpt":"CLI usage information","ref":"/automod/docs/getting-started/cli/","tags":"","title":"Command Line Interface (CLI)"},{"body":"","categories":"","description":"TOML patch file schema, patch file auto-merging approach, automatic patch extraction from existing mods, patch file merging/unification, and JSONPath experimentation support","excerpt":"TOML patch file schema, patch file auto-merging approach, automatic …","ref":"/automod/docs/guide/","tags":"","title":"Guide"},{"body":" Wuthering Waves ","categories":"","description":"","excerpt":" Wuthering Waves ","ref":"/automod/docs/games/incompatible/","tags":"","title":"Incompatible Games"},{"body":" Extracting TOML Patch Files using FModel and automod .diff You can extract any existing mod changes by using FModel and automod .diff in 3 steps:\nExtract the game original .uasset JSON files using FModel; as an example, all Stellar Blade data table .uasset (which can be reused for extracting many mods):\nIf you are not familiar with FModel, please see a guide on how to set it up.\nExtract the modded .uasset JSON files of interests using FModel; as an example, the Stellar Blade No Timing Needed to Perfect Parry and Dodge – NoTimingPerfectParryDodge1.0.3 mod by EnjoyourGame:\nUse automod .diff to create TOML patch files\nautomod uses jd to diff the .uasset JSON files and uses the result jd produced to generate its TOML patch files.\nIn many cases, the TOML patch files can be automatically created. However, in this case, automod is unsuccessful in fully creating them; here are the relevant messages from the recording:\nThe following patches were skipped: * C:\\Temp\\automod\\vscode-out\\diff-2025-08-29T16-37-36-856Z\\Exports\\SkillCommandTable.patch * Unsupported patch form at line 21: @ [0,\"Rows\",\"P_Eve_Sword_Evade_Evade1_1\",\"NextComboCommandArray\",0] * Unsupported patch form at line 23: + \"P_Eve_Sword_JustEvade_DashAttack1_1\" * Unsupported patch form at line 27: @ [0,\"Rows\",\"P_Eve_Sword_Evade_Evade1_1\",\"NextComboCommandArray\",6] * Unsupported patch form at line 29: + \"P_Eve_Sword_Air_DropAttack1_1\" * Unsupported patch form at line 49: @ [0,\"Rows\",\"P_Eve_Sword_LockonEvade_Evade1_1\",\"NextComboCommandArray\",0] * Unsupported patch form at line 51: + \"P_Eve_Sword_JustEvade_DashAttack1_1\" * Unsupported patch form at line 55: @ [0,\"Rows\",\"P_Eve_Sword_LockonEvade_Evade1_1\",\"NextComboCommandArray\",6] * Unsupported patch form at line 57: + \"P_Eve_Sword_Air_DropAttack1_1\" * Unsupported patch form at line 62: @ [0,\"Rows\",\"P_Eve_Sword_Lockon_Evade1_1\",\"NextComboCommandArray\",7] * Unsupported patch form at line 64: + \"P_Eve_Sword_Air_DropAttack1_1\" * Unsupported patch form at line 69: @ [0,\"Rows\",\"P_Eve_Sword_Normal_Evade1_1\",\"NextComboCommandArray\",7] * Unsupported patch form at line 71: + \"P_Eve_Sword_Air_DropAttack1_1\" * Unsupported patch form at line 76: @ [0,\"Rows\",\"P_Eve_Sword_Normal_Guard1_1\",\"NextComboCommandArray\",5] * Unsupported patch form at line 78: + \"P_Eve_Sword_Air_DropAttack1_1\" This happened because automod does not support all jd diff result forms. The problematic jd result parts are:\n@ [0,\"Rows\",\"P_Eve_Sword_Evade_Evade1_1\",\"NextComboCommandArray\",0] [ + \"P_Eve_Sword_JustEvade_DashAttack1_1\" + \"P_Eve_Sword_JustEvade_LightAttack1_1\" + \"P_Eve_Sword_JustEvade_StrongAttack1_1\" \"P_Eve_Sword_Combo_LightAttack1_1\" @ [0,\"Rows\",\"P_Eve_Sword_Evade_Evade1_1\",\"NextComboCommandArray\",6] \"P_Eve_Sword_Combo_DashAttack1_1\" + \"P_Eve_Sword_Air_DropAttack1_1\" + \"P_Eve_Sword_Air_DropAttack2_1\" + \"P_Eve_Sword_Normal_BackStab1_1\" + \"P_Eve_Sword_Normal_BackStab2_1\" ] @ [0,\"Rows\",\"P_Eve_Sword_LockonEvade_Evade1_1\",\"NextComboCommandArray\",0] [ + \"P_Eve_Sword_JustEvade_DashAttack1_1\" + \"P_Eve_Sword_JustEvade_LightAttack1_1\" + \"P_Eve_Sword_JustEvade_StrongAttack1_1\" \"P_Eve_Sword_Combo_LightAttack1_1\" @ [0,\"Rows\",\"P_Eve_Sword_LockonEvade_Evade1_1\",\"NextComboCommandArray\",6] \"P_Eve_Sword_Combo_DashAttack1_1\" + \"P_Eve_Sword_Air_DropAttack1_1\" + \"P_Eve_Sword_Air_DropAttack2_1\" + \"P_Eve_Sword_Normal_BackStab1_1\" + \"P_Eve_Sword_Normal_BackStab2_1\" ] @ [0,\"Rows\",\"P_Eve_Sword_Lockon_Evade1_1\",\"NextComboCommandArray\",7] \"P_Eve_Sword_Combo_DashAttack1_1\" + \"P_Eve_Sword_Air_DropAttack1_1\" + \"P_Eve_Sword_Air_DropAttack2_1\" + \"P_Eve_Sword_Normal_BackStab1_1\" + \"P_Eve_Sword_Normal_BackStab2_1\" ] @ [0,\"Rows\",\"P_Eve_Sword_Normal_Evade1_1\",\"NextComboCommandArray\",7] \"P_Eve_Sword_Combo_DashAttack1_1\" + \"P_Eve_Sword_Air_DropAttack1_1\" + \"P_Eve_Sword_Air_DropAttack2_1\" + \"P_Eve_Sword_Normal_BackStab1_1\" + \"P_Eve_Sword_Normal_BackStab2_1\" ] @ [0,\"Rows\",\"P_Eve_Sword_Normal_Guard1_1\",\"NextComboCommandArray\",5] \"P_Eve_Sword_Combo_DashAttack1_1\" + \"P_Eve_Sword_Air_DropAttack1_1\" + \"P_Eve_Sword_Air_DropAttack2_1\" + \"P_Eve_Sword_Normal_BackStab1_1\" + \"P_Eve_Sword_Normal_BackStab2_1\" ] In cases like this, manual intervention is required. That is, you can create the corresponding TOML patches for those using regex/patchlets manually, e.g.,:\n['.*: ^P_Eve_Sword_(Lockon)?Evade_Evade1_1'] NextComboCommandArray = '''=\u003e { var array = v.orig[Seq[Map[String, Any]]] val first = array.head array +:= (first + (\"Value\" -\u003e \"P_Eve_Sword_JustEvade_DashAttack1_1\")) array +:= (first + (\"Value\" -\u003e \"P_Eve_Sword_JustEvade_LightAttack1_1\")) array +:= (first + (\"Value\" -\u003e \"P_Eve_Sword_JustEvade_StrongAttack1_1\")) array +:= (first + (\"Value\" -\u003e \"P_Eve_Sword_Air_DropAttack1_1\")) array +:= (first + (\"Value\" -\u003e \"P_Eve_Sword_Air_DropAttack2_1\")) array +:= (first + (\"Value\" -\u003e \"P_Eve_Sword_Normal_BackStab1_1\")) array +:= (first + (\"Value\" -\u003e \"P_Eve_Sword_Normal_BackStab2_1\")) array }''' ['.*: ^P_Eve_Sword_(Lockon|Normal)_(Evade|Guard)1_1$'] NextComboCommandArray = '''=\u003e { assert(v.objName != \"P_Eve_Sword_Lockon_Guard1_1\") var array = v.orig[Seq[Map[String, Any]]] val first = array.head array +:= (first + (\"Value\" -\u003e \"P_Eve_Sword_Air_DropAttack1_1\")) array +:= (first + (\"Value\" -\u003e \"P_Eve_Sword_Air_DropAttack2_1\")) array +:= (first + (\"Value\" -\u003e \"P_Eve_Sword_Normal_BackStab1_1\")) array +:= (first + (\"Value\" -\u003e \"P_Eve_Sword_Normal_BackStab2_1\")) array }''' Using automod .diff.into automod .diff.into can be used to create TOML patch files between the game original FModel extracted .uasset folder, say Output\\Original, and another folder, say Output\\Modded, which contains several FModel extracted mods:\n","categories":"","description":"Extracting patch files from existing mods using FModel and `.diff` or `.diff.into`","excerpt":"Extracting patch files from existing mods using FModel and `.diff` or …","ref":"/automod/docs/guide/patch-file-extraction/","tags":"","title":"Patch File Extraction"},{"body":" Carefree Mode https://www.nexusmods.com/swordandfairy7/mods/37\nMax Level Stats https://www.nexusmods.com/swordandfairy7/mods/37\n","categories":"","description":"https://store.steampowered.com/app/1543030/Sword_and_Fairy_7/","excerpt":"https://store.steampowered.com/app/1543030/Sword_and_Fairy_7/","ref":"/automod/docs/games/supported/sword-and-fairy-7/","tags":"","title":"Sword and Fairy 7"},{"body":"“Supported” means that automod maintains the game configuration (and some with supporting resources, e.g., .usmap and .cache files for the game), and they are typically kept up-to-date. These games do not require an AES key to mod or necessitating a mod loader to use a mod, and they are chosen based on the interests of the author (i.e., jpabscale).\nCompatible games are known games that the author and/or others have successfully used automod on to generate a mod for.\nIncompatible games are known games where automod cannot currently be used on, typically due to insufficient support in repak, retoc, and/or UAssetAPI.\nPrivate message me in nexusmods.com if you have used automod successfully/unsuccessfully on a certain game, and I’ll link your (SFW) mods in this website.\n","categories":"","description":"Supported games and known compatible/incompatible ones","excerpt":"Supported games and known compatible/incompatible ones","ref":"/automod/docs/games/","tags":"","title":"Games"},{"body":" Carefree Mode https://www.nexusmods.com/kenabridgeofspirits/mods/43\n","categories":"","description":"https://store.steampowered.com/app/1954200/Kena_Bridge_of_Spirits/","excerpt":"https://store.steampowered.com/app/1954200/Kena_Bridge_of_Spirits/","ref":"/automod/docs/games/supported/kena-bridge-of-spirits/","tags":"","title":"Kena: Bridge of Spirits"},{"body":" The .toml command merges all patch files in the patches directory⠀and creates a “unified” TOML patch files. The unification creates a single patch file for all the merged patch files for each .uasset, with all data table regular expression and patchlets applied, producing plain TOML patches. Non-data table .@: patches are copied as they are, but with their load order embedded in between .@: and / or $ to preserve their original sequence of applications.\nFor example, for the following patches structure:\nwhere:\npatches\\beta-burst-recovery-scan\\EffectTable.toml:\n# based on https://www.nexusmods.com/stellarblade/mods/802 [N_Drone_Scan] LifeTime = 30.0 # based on https://www.nexusmods.com/stellarblade/mods/897 ['.*: ^P_Eve_SkillTree_Just(.*BetaGauge|.*BurstGauge).*$'] CalculationMultipleValue = '''=\u003e v.objName match { case \"P_Eve_SkillTree_JustParry_BetaGauge1\" =\u003e 8 case \"P_Eve_SkillTree_JustParry_BetaGauge2\" =\u003e 6 case \"P_Eve_SkillTree_JustEvade_BurstGauge1\" =\u003e 4 case \"P_Eve_SkillTree_JustEvade_BurstGauge2\" =\u003e 3 }''' OverlapCount = 1 LifeTime = 11 StartDelayTime = 1 LoopIntervalTime = 1 ActiveTargetFilterAlias = 'Self' LoopTargetFilterAlias = 'Self' patches\\EffectTable.toml:\n['.*: ^Gear_BetaCrystalAdditiveRate_.*$'] StatType = \"ActorStatType_DrainHpByAttackPowerRate\" StatCalculationType = \"EffectCalculationType_Static\" CalculationValue = '''=\u003e { val prefix = \"Gear_BetaCrystalAdditiveRate_\" var n = 0.003 * v.objName(prefix.length).toDouble if (v.objName.contains(\"MK2\")) n = n * 2 n }''' LifeType = \"EffectLifeType_Infinite\" LifeTime = 0 patches\\RecoveryCacheZone.toml:\n['.@: $..[?(@.Name == \"ZoneBoundPadOverrides\" \u0026\u0026 @.StructType == \"Vector\")]'] ZoneBoundPadOverrides = '''=\u003e { val orig = v.orig[Map[String, Any]] orig + (\"Z\" -\u003e -1999d) }''' patches\\TargetFilterTable.toml:\n['.@: $..[?(@.Name =~ /N_Drone_Normal_Scan1_1_Target.*/)]'] FarDistance = 30000 TargetCheckValue1 = 3000 .toml produces 3 patch files:\nEffectTable.toml:\n# ... # Game Original Value [Gear_BetaCrystalAdditiveRate_1] CalculationValue = 0.147 # 0.4000000059604645 LifeTime = 0 # \"+0\" LifeType = \"EffectLifeType_Infinite\" # \"EffectLifeType_Infinite\" StatCalculationType = \"EffectCalculationType_Static\" # \"EffectCalculationType_Static\" StatType = \"ActorStatType_DrainHpByAttackPowerRate\" # \"ActorStatType_BetaCrystalAdditiveRate\" [Gear_BetaCrystalAdditiveRate_1_MK2] CalculationValue = 0.294 # 0.6000000238418579 LifeTime = 0 # \"+0\" LifeType = \"EffectLifeType_Infinite\" # \"EffectLifeType_Infinite\" StatCalculationType = \"EffectCalculationType_Static\" # \"EffectCalculationType_Static\" StatType = \"ActorStatType_DrainHpByAttackPowerRate\" # \"ActorStatType_BetaCrystalAdditiveRate\" [Gear_BetaCrystalAdditiveRate_2] CalculationValue = 0.15 # 0.699999988079071 LifeTime = 0 # \"+0\" LifeType = \"EffectLifeType_Infinite\" # \"EffectLifeType_Infinite\" StatCalculationType = \"EffectCalculationType_Static\" # \"EffectCalculationType_Static\" StatType = \"ActorStatType_DrainHpByAttackPowerRate\" # \"ActorStatType_BetaCrystalAdditiveRate\" [Gear_BetaCrystalAdditiveRate_2_MK2] CalculationValue = 0.3 # 1.0499999523162842 LifeTime = 0 # \"+0\" LifeType = \"EffectLifeType_Infinite\" # \"EffectLifeType_Infinite\" StatCalculationType = \"EffectCalculationType_Static\" # \"EffectCalculationType_Static\" StatType = \"ActorStatType_DrainHpByAttackPowerRate\" # \"ActorStatType_BetaCrystalAdditiveRate\" [Gear_BetaCrystalAdditiveRate_3] CalculationValue = 0.153 # 1.0 LifeTime = 0 # \"+0\" LifeType = \"EffectLifeType_Infinite\" # \"EffectLifeType_Infinite\" StatCalculationType = \"EffectCalculationType_Static\" # \"EffectCalculationType_Static\" StatType = \"ActorStatType_DrainHpByAttackPowerRate\" # \"ActorStatType_BetaCrystalAdditiveRate\" [Gear_BetaCrystalAdditiveRate_3_MK2] CalculationValue = 0.306 # 1.5 LifeTime = 0 # \"+0\" LifeType = \"EffectLifeType_Infinite\" # \"EffectLifeType_Infinite\" StatCalculationType = \"EffectCalculationType_Static\" # \"EffectCalculationType_Static\" StatType = \"ActorStatType_DrainHpByAttackPowerRate\" # \"ActorStatType_BetaCrystalAdditiveRate\" [N_Drone_Scan] LifeTime = 30.0 # 3.5 [P_Eve_SkillTree_JustEvade_BurstGauge1] ActiveTargetFilterAlias = \"Self\" # \"Self\" CalculationMultipleValue = 4 # 1.0 LifeTime = 11 # 1.0 LoopIntervalTime = 1 # \"+0\" LoopTargetFilterAlias = \"Self\" # 'null' OverlapCount = 1 # 0 StartDelayTime = 1 # \"+0\" [P_Eve_SkillTree_JustEvade_BurstGauge2] ActiveTargetFilterAlias = \"Self\" # \"Self\" CalculationMultipleValue = 3 # 1.0 LifeTime = 11 # 1.0 LoopIntervalTime = 1 # \"+0\" LoopTargetFilterAlias = \"Self\" # 'null' OverlapCount = 1 # 0 StartDelayTime = 1 # \"+0\" [P_Eve_SkillTree_JustParry_BetaGauge1] ActiveTargetFilterAlias = \"Self\" # \"Self\" CalculationMultipleValue = 8 # 1.0 LifeTime = 11 # 1.0 LoopIntervalTime = 1 # \"+0\" LoopTargetFilterAlias = \"Self\" # 'null' OverlapCount = 1 # 0 StartDelayTime = 1 # \"+0\" [P_Eve_SkillTree_JustParry_BetaGauge2] ActiveTargetFilterAlias = \"Self\" # \"Self\" CalculationMultipleValue = 6 # 1.0 LifeTime = 11 # 1.0 LoopIntervalTime = 1 # \"+0\" LoopTargetFilterAlias = \"Self\" # 'null' OverlapCount = 1 # 0 StartDelayTime = 1 # \"+0\" RecoveryCacheZone.toml:\n# ... # Game Original Value ['.@: #2 $..[?(@.Name == \"ZoneBoundPadOverrides\" \u0026\u0026 @.StructType == \"Vector\")]'] ZoneBoundPadOverrides = '''=\u003e { val orig = v.orig[Map[String, Any]] orig + (\"Z\" -\u003e -1999d) }''' TargetFilterTable.toml:\n# ... # Game Original Value [N_Drone_Normal_Scan1_1_Target_Enemy] FarDistance = 30000 # 10000.0 TargetCheckValue1 = 3000 # 1000.0 [N_Drone_Normal_Scan1_1_Target_Owner] FarDistance = 30000 # 10000.0 TargetCheckValue1 = 3000 # 500.0 .toml.all is similar to .toml, except that it merges TOML patch files after code patches have been applied (see Advanced Script Customizations).\n","categories":"","description":"Unifying (merging) patch files into one patch file for each `.uasset` using `.toml` or `.toml.all`","excerpt":"Unifying (merging) patch files into one patch file for each `.uasset` …","ref":"/automod/docs/guide/patch-file-unification/","tags":"","title":"Patch File Unification"},{"body":" Settings Open settings using the File-\u003ePreferences-\u003eSettings menu item (or the Ctrl + , keyboard shortcut) and search for: automod.\nMost settings are populated, but you can fill in your mod name and game information. Note that Game Active ID is the game folder name containing Content\\Paks, and it defaults to SB if left blank (but it is a good practice to fill it in regardless).\nYou can also edit the settings by accessing the command palette (Ctrl + Shift + P) and type Preferences: Open User Settings (JSON).\nLaunching automod Commands Open the command palette, type Run Tasks and press Enter/mouse-click to select, select automod, and select one of automod’s commands that you want to launch.\n","categories":"","description":"Setting up the VSCode extension and launching automod commands","excerpt":"Setting up the VSCode extension and launching automod commands","ref":"/automod/docs/getting-started/vscode/","tags":"","title":"VSCode Extension"},{"body":" To help experimenting with JSONPath, automod .search can be used on a .sam file consisting of the .uasssets of interests and their associated JSONPath to try.\nFor example:\n# EffectTable $..[?(@.Name == 'N_Drone_Scan')] $..[?(@.Name == 'N_Drone_Scan')]..[?(@.Name == 'LifeTime')] $..[?(@.Name == 'LV_Dead_Ocean')] # TargetFilterTable drone-scan: $..[?(@.Name =~ /N_Drone_Normal_Scan1_1_Target.*/)] # DifficultyStatGroupTable $..Data[16:31] $..Data[60:86] That is, the .uassset name should be prefixed with # with the JSONPath expressions following it in separate lines. The expression can optionally labeled by prefixing it with (\u003calphanum\u003e|'_'|'-')+:. Any line that does not adhere these forms is ignored.\nThe search results are written as JSON files, one file per JSONPath expression, whose name contains the expression number of appearance for the .uasset with the label, if specified.\n","categories":"","description":"Experimenting with JSONPath queries using `.search`","excerpt":"Experimenting with JSONPath queries using `.search`","ref":"/automod/docs/guide/jsonpath-experimentation/","tags":"","title":"JSONPath Experimentation"},{"body":" John Wick Mode https://www.nexusmods.com/wanteddead/mods/28\n","categories":"","description":"https://store.steampowered.com/app/1981610/Wanted_Dead/","excerpt":"https://store.steampowered.com/app/1981610/Wanted_Dead/","ref":"/automod/docs/games/supported/wanted-dead/","tags":"","title":"Wanted: Dead"},{"body":" You can customize automod further by updating patchCustom.sc:\nimport com.fasterxml.jackson.databind.JsonNode import scala.collection.immutable.{TreeMap, TreeSet} lazy val uassetNames: TreeSet[String] = TreeSet( // insert the uasset name that you want to handle in the patch method here (without file extension) ) // This method will be called for any uasset in the uassetNames, as well as for uasset not handled by the script code // The passed ast's JSON schema is UAssetAPI's; see the .cache directory to understand UAssetAPI JSON schema def patch(uassetName: String, ast: JsonNode, patchTrees: Seq[automod.UAssetPropertyChanges]): Boolean = { // insert your custom patching code here return false // return true if you can modify the ast successfully } where you can insert the .uasset names in uassetNames that you are interested to modify, and then implement the patching logic in on how you want to patch each of the .uassets in uassetName in the patch Scala method. Note that any .uasset in uassetNames will not be processed by automod and simply delegated to patch. The ast variable holds the entire JSON object of the .uasset named uassetName. The patchTrees variables hold the TOML patch files associated with uassetName.\nYou can use Scala Metals to help with coding patchCustom.sc by providing a rich-featured Scala IDE in VSCode/VSCodium (e.g., debugging, etc.).\n","categories":"","description":"Customizing automod to process any JSON `.uasset` structure","excerpt":"Customizing automod to process any JSON `.uasset` structure","ref":"/automod/docs/guide/advanced-customizations/","tags":"","title":"Advanced Script Customizations"},{"body":" Setting up automod In .config.json:\n\"Game\": {\r\"directory\": \"\",\r\"contentPaks\": \"Genesis/Content/Paks\",\r\"unrealEngine\": \"4.27\",\r\"mapUri\": \"\",\r\"aesKey\": \"\",\r\"zen\": true,\r\"repakPackOptions\": \"\"\r} In VSCode User settings.json:\n\"Game.directory\": \"\",\r\"Game.contentPaks\": \"Genesis/Content/Paks\",\r\"Game.unrealEngine\": \"4.27\",\r\"Game.mapUri\": \"\",\r\"Game.aesKey\": \"\",\r\"Game.zen\": \"true\", See the Prerequisites section on how to extract a game AES key.\nFill in the .directory location; note that .directory uses the operating system path (\u003cdrive\u003e:\\\u003cpath-to-game\u003e).\nCarefree Mode https://www.nexusmods.com/asterigoscurseofthestars/mods/14\n","categories":"","description":"https://www.gog.com/en/game/asterigos_curse_of_the_stars_ultimate_edition","excerpt":"https://www.gog.com/en/game/asterigos_curse_of_the_stars_ultimate_edit …","ref":"/automod/docs/games/compatible/asterigos-curse-of-the-stars/","tags":"","title":"Asterigos: Curse of the Stars"},{"body":" automod Learn More Download An automated, polyglot, and highly parallel Unreal Engine game mod generator\n   v3.3.5 The Auto Modding Script (automod) is an automated, polyglot, and highly parallel Unreal Engine game mod generator from succinct TOML patch files for .uasset properties, which may include embedded regular expressions and Scala, Typescript, Javascript, Python, and/or Lua patchlets, enabling complex patching tasks with significantly lower manual efforts, all with patch auto-merging support.\nA VSCode/VSCodium extension is provided to ease use, complementing an existing extension providing TOML syntax highlighting/checking.\nPatch File Examples\nStellar Blade EffectTable.toml: Plain Regex+Scala +Typescript +Javascript +Python +Lua # Based on https://www.nexusmods.com/stellarblade/mods/897 [P_Eve_SkillTree_JustEvade_BurstGauge1] CalculationMultipleValue = 4 LifeTime = 11 LoopIntervalTime = 1 LoopTargetFilterAlias = \"Self\" OverlapCount = 1 StartDelayTime = 1 [P_Eve_SkillTree_JustEvade_BurstGauge2] CalculationMultipleValue = 3 LifeTime = 11 LoopIntervalTime = 1 LoopTargetFilterAlias = \"Self\" OverlapCount = 1 StartDelayTime = 1 [P_Eve_SkillTree_JustParry_BetaGauge1] CalculationMultipleValue = 8 LifeTime = 11 LoopIntervalTime = 1 LoopTargetFilterAlias = \"Self\" OverlapCount = 1 StartDelayTime = 1 [P_Eve_SkillTree_JustParry_BetaGauge2] CalculationMultipleValue = 6 LifeTime = 11 LoopIntervalTime = 1 LoopTargetFilterAlias = \"Self\" OverlapCount = 1 StartDelayTime = 1 ['.*: ^P_Eve_SkillTree_Just(.*BetaGauge|.*BurstGauge).*$'] CalculationMultipleValue = '''=\u003e v.objName match { case \"P_Eve_SkillTree_JustParry_BetaGauge1\" =\u003e 8 case \"P_Eve_SkillTree_JustParry_BetaGauge2\" =\u003e 6 case \"P_Eve_SkillTree_JustEvade_BurstGauge1\" =\u003e 4 case \"P_Eve_SkillTree_JustEvade_BurstGauge2\" =\u003e 3 }''' OverlapCount = 1 LifeTime = 11 StartDelayTime = 1 LoopIntervalTime = 1 LoopTargetFilterAlias = 'Self' ['.*: ^P_Eve_SkillTree_Just(.*BetaGauge|.*BurstGauge).*$'] CalculationMultipleValue = '''=ts\u003e let r: number = 0; switch(v.objName()) { case \"P_Eve_SkillTree_JustParry_BetaGauge1\": r = 8; break; case \"P_Eve_SkillTree_JustParry_BetaGauge2\": r = 6; break; case \"P_Eve_SkillTree_JustEvade_BurstGauge1\": r = 4; break; case \"P_Eve_SkillTree_JustEvade_BurstGauge2\": r = 3; break; } r ''' OverlapCount = 1 LifeTime = 11 StartDelayTime = 1 LoopIntervalTime = 1 LoopTargetFilterAlias = 'Self' ['.*: ^P_Eve_SkillTree_Just(.*BetaGauge|.*BurstGauge).*$'] CalculationMultipleValue = '''=js\u003e let r = 0; switch(v.objName()) { case \"P_Eve_SkillTree_JustParry_BetaGauge1\": r = 8; break; case \"P_Eve_SkillTree_JustParry_BetaGauge2\": r = 6; break; case \"P_Eve_SkillTree_JustEvade_BurstGauge1\": r = 4; break; case \"P_Eve_SkillTree_JustEvade_BurstGauge2\": r = 3; break; } r ''' OverlapCount = 1 LifeTime = 11 StartDelayTime = 1 LoopIntervalTime = 1 LoopTargetFilterAlias = 'Self' ['.*: ^P_Eve_SkillTree_Just(.*BetaGauge|.*BurstGauge).*$'] CalculationMultipleValue = '''=py\u003e r = 0 match v.objName(): case \"P_Eve_SkillTree_JustParry_BetaGauge1\": r = 8 case \"P_Eve_SkillTree_JustParry_BetaGauge2\": r = 6 case \"P_Eve_SkillTree_JustEvade_BurstGauge1\": r = 4 case \"P_Eve_SkillTree_JustEvade_BurstGauge2\": r = 3 r ''' OverlapCount = 1 LifeTime = 11 StartDelayTime = 1 LoopIntervalTime = 1 LoopTargetFilterAlias = 'Self' ['.*: ^P_Eve_SkillTree_Just(.*BetaGauge|.*BurstGauge).*$'] CalculationMultipleValue = '''=lua\u003e local r = { [\"P_Eve_SkillTree_JustParry_BetaGauge1\"] = 8, [\"P_Eve_SkillTree_JustParry_BetaGauge2\"] = 6, [\"P_Eve_SkillTree_JustEvade_BurstGauge1\"] = 4, [\"P_Eve_SkillTree_JustEvade_BurstGauge2\"] = 3 } return r[v.objName] ''' OverlapCount = 1 LifeTime = 11 StartDelayTime = 1 LoopIntervalTime = 1 LoopTargetFilterAlias = 'Self' ","categories":"","description":"","excerpt":" automod Learn More Download An automated, polyglot, and highly …","ref":"/automod/","tags":"","title":"Automod"},{"body":"\nCreating Unreal Engine game mods is tedious, error-prone, and time-consuming. To help with the process, automod can automatically generate a mod with patched .uasset properties from succinct TOML patch files, which may include embedded regular expressions and Scala, Typescript, Javascript, and/or Python patchlets, enabling complex patching tasks with significantly lower manual efforts, all with patch auto-merging support.\n","categories":"","description":"","excerpt":"\nCreating Unreal Engine game mods is tedious, error-prone, and …","ref":"/automod/docs/","tags":"","title":"automod docs"},{"body":" Setting up automod In .config.json:\n\"Game\": {\r\"directory\": \"\",\r\"contentPaks\": \"BurningSwordDeathSun/Content/Paks\",\r\"unrealEngine\": \"5.3\",\r\"mapUri\": \"\",\r\"aesKey\": \"\",\r\"zen\": true,\r\"repakPackOptions\": \"\"\r} In VSCode User settings.json:\n\"Game.directory\": \"\",\r\"Game.contentPaks\": \"BurningSwordDeathSun/Content/Paks\",\r\"Game.unrealEngine\": \"5.3\",\r\"Game.mapUri\": \"\",\r\"Game.aesKey\": \"\",\r\"Game.zen\": \"true\", See the Prerequisites section on how to extract a game AES key.\nFill in the .directory location; note that .directory uses the operating system path (\u003cdrive\u003e:\\\u003cpath-to-game\u003e).\nCombat Hack https://www.nexusmods.com/burningsworddeathsun/mods/1\n","categories":"","description":"https://store.steampowered.com/app/2561460/Burning_Sword_Death_Sun/","excerpt":"https://store.steampowered.com/app/2561460/Burning_Sword_Death_Sun/","ref":"/automod/docs/games/compatible/burning-sword-death-sun/","tags":"","title":"Burning Sword: Death Sun"},{"body":" Setting up automod In .config.json:\n\"Projectlsa\": { \"aesKey\": \"\", \"contentPaks\": \"SpacePrototype/Content/Paks\", \"directory\": \"\", \"mapUri\": \"\", \"repakPackOptions\": \"\", \"unrealEngine\": \"4.26\", \"zen\": false } In VSCode User settings.json:\n\"Projectlsa.directory\": \"\", \"Projectlsa.contentPaks\": \"SpacePrototype/Content/Paks\", \"Projectlsa.unrealEngine\": \"4.26\", \"Projectlsa.mapUri\": \"\", \"Projectlsa.aesKey\": \"\", \"Projectlsa.zen\": \"false\", \"Projectlsa.repakPackOptions\": \"\", See the Prerequisites section on how to extract a game AES key.\nFill in the .directory; note that .directory uses the operating system path (\u003cdrive\u003e:\\\u003cpath-to-game\u003e).\nCarefree Mode https://www.nexusmods.com/chorus/mods/7\n","categories":"","description":"https://www.gog.com/en/game/chorus","excerpt":"https://www.gog.com/en/game/chorus","ref":"/automod/docs/games/compatible/chorus/","tags":"","title":"Chorus"},{"body":"Game version: 1.0.3\nSetting up automod In .config.json:\n\"Game\": { \"directory\": \"\", \"contentPaks\": \"Game/Content/Paks\", \"unrealEngine\": \"5.4\", \"mapUri\": \"\", \"aesKey\": \"\", \"zen\": true, \"repakPackOptions\": \"\" } In VSCode User settings.json:\n\"Game.directory\": \"\", \"Game.contentPaks\": \"Game/Content/Paks\", \"Game.unrealEngine\": \"5.4\", \"Game.mapUri\": \"\", \"Game.aesKey\": \"\", \"Game.zen\": \"true\", See the Prerequisites section on how to extract a game AES key and .usmap.\nFill in the .directory and the .mapUri locations; note that .directory uses the operating system path (\u003cdrive\u003e:\\\u003cpath-to-game\u003e), while .mapUri should either be a https:// URL or a file:// URI (file:///\u003cdrive\u003e:/\u003cpath-to-game\u003e/\u003cgame-id\u003e/Binaries/Win64/Mappings.usmap).\nNo Cost and Unlock-Sell Most Shop Items https://www.nexusmods.com/daemonxmachinatitanicscion/mods/4\nSuper Weapon https://www.nexusmods.com/daemonxmachinatitanicscion/mods/5\nSuper Armor https://www.nexusmods.com/daemonxmachinatitanicscion/mods/6\nSuper Arsenal Skill https://www.nexusmods.com/daemonxmachinatitanicscion/mods/17\nSuper Attachment https://www.nexusmods.com/daemonxmachinatitanicscion/mods/21\nNo Cost Factory https://www.nexusmods.com/daemonxmachinatitanicscion/mods/7\nNo Cost Gene Fusion or Reset and Equip All Passive Skills https://www.nexusmods.com/daemonxmachinatitanicscion/mods/8\nAll-in-One https://www.nexusmods.com/daemonxmachinatitanicscion/mods/10\nAgile Arsenal and Heavy Armor (Unlimited) https://www.nexusmods.com/daemonxmachinatitanicscion/mods/11\nGotta Catch Em All https://www.nexusmods.com/daemonxmachinatitanicscion/mods/16\nLoot and Factory Artifice https://www.nexusmods.com/daemonxmachinatitanicscion/mods/24\nHuge Tip https://www.nexusmods.com/daemonxmachinatitanicscion/mods/26\nUltimate Iroas https://www.nexusmods.com/daemonxmachinatitanicscion/mods/28\nUnlock https://www.nexusmods.com/daemonxmachinatitanicscion/mods/15\n","categories":"","description":"https://store.steampowered.com/app/1342490/Daemon_X_Machina_Titanic_Scion/","excerpt":"https://store.steampowered.com/app/1342490/Daemon_X_Machina_Titanic_Sc …","ref":"/automod/docs/games/compatible/daemon-x-machina-titanic-scion/","tags":"","title":"Daemon X Machina: Titanic Scion"},{"body":" Setting up automod In .config.json:\n\"Projectlsa\": { \"aesKey\": \"\", \"contentPaks\": \"ProjectDD/Content/Paks\", \"directory\": \"\", \"mapUri\": \"\", \"repakPackOptions\": \"\", \"unrealEngine\": \"5.4\", \"zen\": true } In VSCode User settings.json:\n\"Projectlsa.directory\": \"\", \"Projectlsa.contentPaks\": \"ProjectDD/Content/Paks\", \"Projectlsa.unrealEngine\": \"5.4\", \"Projectlsa.mapUri\": \"\", \"Projectlsa.aesKey\": \"\", \"Projectlsa.zen\": \"true\", \"Projectlsa.repakPackOptions\": \"\", Fill in the .directory; note that .directory uses the operating system path (\u003cdrive\u003e:\\\u003cpath-to-game\u003e).\nCombat Hack https://www.nexusmods.com/doubledragonrevive/mods/1\nUnlock https://www.nexusmods.com/doubledragonrevive/mods/2\n","categories":"","description":"https://store.steampowered.com/app/3012220/Double_Dragon_Revive/","excerpt":"https://store.steampowered.com/app/3012220/Double_Dragon_Revive/","ref":"/automod/docs/games/compatible/double-dragon-revive/","tags":"","title":"Double Dragon Revive"},{"body":" Setting up automod In .config.json:\n\"Game\": {\r\"directory\": \"\",\r\"contentPaks\": \"EDENSZERO/Content/Paks\",\r\"unrealEngine\": \"4.27\",\r\"mapUri\": \"\",\r\"aesKey\": \"\",\r\"zen\": false,\r\"repakPackOptions\": \"\"\r} In VSCode User settings.json:\n\"Game.directory\": \"\",\r\"Game.contentPaks\": \"EDENSZERO/Content/Paks\",\r\"Game.unrealEngine\": \"4.27\",\r\"Game.mapUri\": \"\",\r\"Game.aesKey\": \"\",\r\"Game.zen\": \"false\", Fill in the .directory location; note that .directory uses the operating system path (\u003cdrive\u003e:\\\u003cpath-to-game\u003e).\nCarefree Mode https://www.nexusmods.com/edenszero/mods/8\nSuper Attack https://www.nexusmods.com/edenszero/mods/9\n","categories":"","description":"https://store.steampowered.com/app/3125750/EDENS_ZERO/","excerpt":"https://store.steampowered.com/app/3125750/EDENS_ZERO/","ref":"/automod/docs/games/compatible/edens-zero/","tags":"","title":"Edens Zero"},{"body":" Setting up automod In .config.json:\n\"Projectlsa\": { \"aesKey\": \"\", \"contentPaks\": \"Projectlsa/Content/Paks\", \"directory\": \"\", \"mapUri\": \"\", \"repakPackOptions\": \"\", \"unrealEngine\": \"4.27\", \"zen\": true } In VSCode User settings.json:\n\"Projectlsa.directory\": \"\", \"Projectlsa.contentPaks\": \"Projectlsa/Content/Paks\", \"Projectlsa.unrealEngine\": \"4.27\", \"Projectlsa.mapUri\": \"\", \"Projectlsa.aesKey\": \"\", \"Projectlsa.zen\": \"true\", \"Projectlsa.repakPackOptions\": \"\", See the Prerequisites section on how to extract a game AES key and .usmap.\nFill in the .directory and the .mapUri locations; note that .directory uses the operating system path (\u003cdrive\u003e:\\\u003cpath-to-game\u003e), while .mapUri should either be a https:// URL or a file:// URI (file:///\u003cdrive\u003e:/\u003cpath-to-game\u003e/\u003cgame-id\u003e/Binaries/Win64/Mappings.usmap).\nKazer End Game Character Stats https://www.nexusmods.com/lostsoulaside/mods/10\nNo Cooldown-Cost-Limit and 1-2-3-4-5x Attack Kazer Ability https://www.nexusmods.com/lostsoulaside/mods/9\nNo Cost Shop - Crafting - Weapon Edit https://www.nexusmods.com/lostsoulaside/mods/24\nNo Cost Skills https://www.nexusmods.com/lostsoulaside/mods/25\nHarder Normal Mode https://www.nexusmods.com/lostsoulaside/mods/26\nAll Loots https://www.nexusmods.com/lostsoulaside/mods/27\nWider Field of View https://www.nexusmods.com/lostsoulaside/mods/6\nThanks to YoungThaddeus for discovering and sharing the property object to change the field of view.\n","categories":"","description":"https://store.steampowered.com/app/3378960/Lost_Soul_Aside/","excerpt":"https://store.steampowered.com/app/3378960/Lost_Soul_Aside/","ref":"/automod/docs/games/compatible/lost-soul-aside/","tags":"","title":"Lost Soul Aside"},{"body":" Setting up automod In .config.json:\n\"Game\": {\r\"directory\": \"\",\r\"contentPaks\": \"Game_SBDR/Content/Paks\",\r\"unrealEngine\": \"4.27\",\r\"mapUri\": \"\",\r\"aesKey\": \"\",\r\"zen\": false,\r\"repakPackOptions\": \"\"\r} In VSCode User settings.json:\n\"Game.directory\": \"\",\r\"Game.contentPaks\": \"Game_SBDR/Content/Paks\",\r\"Game.unrealEngine\": \"4.27\",\r\"Game.mapUri\": \"\",\r\"Game.aesKey\": \"\",\r\"Game.zen\": \"false\", See the Prerequisites section on how to extract a game AES key.\nFill in the .directory location; note that .directory uses the operating system path (\u003cdrive\u003e:\\\u003cpath-to-game\u003e).\nUnlock https://www.nexusmods.com/mobilesuitgundamseedbattledestinyremastered/mods/9\n","categories":"","description":"https://store.steampowered.com/app/1857740/MOBILE_SUIT_GUNDAM_SEED_BATTLE_DESTINY_REMASTERED/","excerpt":"https://store.steampowered.com/app/1857740/MOBILE_SUIT_GUNDAM_SEED_BAT …","ref":"/automod/docs/games/compatible/mobile-suit-gundam-seed-battle-destiny-remastered/","tags":"","title":"Mobile Suit Gundam SEED Battle Destiny Remastered"},{"body":"","categories":"","description":"","excerpt":"","ref":"/automod/search/","tags":"","title":"Search Results"},{"body":" Setting up automod In .config.json:\n\"Projectlsa\": { \"aesKey\": \"\", \"contentPaks\": \"Sifu/Content/Paks\", \"directory\": \"\", \"mapUri\": \"\", \"repakPackOptions\": \"\", \"unrealEngine\": \"4.26\", \"zen\": false } In VSCode User settings.json:\n\"Projectlsa.directory\": \"\", \"Projectlsa.contentPaks\": \"Sifu/Content/Paks\", \"Projectlsa.unrealEngine\": \"4.26\", \"Projectlsa.mapUri\": \"\", \"Projectlsa.aesKey\": \"\", \"Projectlsa.zen\": \"false\", \"Projectlsa.repakPackOptions\": \"\", See the Prerequisites section on how to extract a game AES key.\nFill in the .directory; note that .directory uses the operating system path (\u003cdrive\u003e:\\\u003cpath-to-game\u003e).\nCarefree Mode https://www.nexusmods.com/sifu/mods/1440\nShrine Effects https://www.nexusmods.com/sifu/mods/1441\n","categories":"","description":"https://store.steampowered.com/app/2138710/Sifu/","excerpt":"https://store.steampowered.com/app/2138710/Sifu/","ref":"/automod/docs/games/compatible/sifu/","tags":"","title":"Sifu"}]