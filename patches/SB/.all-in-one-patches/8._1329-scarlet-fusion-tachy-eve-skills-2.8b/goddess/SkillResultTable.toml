['.*: ^(?!.*_Ex.*$)P_Eve_Sword_Normal_(Light|Strong)Attack.*_Hit.*$']
HitLevelResultTargetCommonEffect = '''=> {
  val maxStunTime = 3d
  val mult = 3d
  var hitStunTime = 0.3d
  val newArray = JsonNodeFactory.instance.arrayNode
  val value = v.currentOpt[String].get
  val array = toJsonNodeT[ArrayNode](value)
  for (i <- 0 until array.size) array.get(i).get("Alias").asText match {
    case "HitStun" => hitStunTime = array.get(i).get("Time").asDouble
    case _ => newArray.add(array.get(i))
  }
  hitStunTime = if (hitStunTime > maxStunTime) hitStunTime 
                else if (hitStunTime * mult > maxStunTime) maxStunTime
                else hitStunTime * mult
  newArray.add(toJsonNode(s"""{ "Alias": "HitStun", "Time": $hitStunTime }"""))
  newArray.toString
}'''

['.*: ^P_Eve_.*Just(Evade|Parry).*Hit.*$']
HitLevelResultTargetCommonEffect = '''=> {
  val maxStunTime = 3d
  val mult = 3d
  var hitStunTime = 0.3d
  val newArray = JsonNodeFactory.instance.arrayNode
  val value = v.currentOpt[String].get
  val array = toJsonNodeT[ArrayNode](value)
  for (i <- 0 until array.size) array.get(i).get("Alias").asText match {
    case "HitStun" => hitStunTime = array.get(i).get("Time").asDouble
    case _ => newArray.add(array.get(i))
  }
  hitStunTime = if (hitStunTime > maxStunTime) hitStunTime 
                else if (hitStunTime * mult > maxStunTime) maxStunTime
                else hitStunTime * mult
  newArray.add(toJsonNode(s"""{ "Alias": "HitStun", "Time": $hitStunTime }"""))
  newArray.toString
}'''
