# ...                                                        # Game Original Value
['.*: ^P_Eve_Sword_Burst_MeleeCombatBuff.*(Cast|Hit).*$']
StartSelfEffect = '''=> {
  val newArray = JsonNodeFactory.instance.arrayNode
  newArray.add(toJsonNode("""{ "Alias": "NoDamage_Skill", "Time": 2 }"""))
  newArray.add(toJsonNode("""{ "Alias": "AddHitDefense_Skill", "CalculationValue": 4 }"""))
  newArray.add(toJsonNode("""{ "Alias": "AddHitDefense_EveSkill", "CalculationValue": 4 }"""))
  newArray.add(toJsonNode("""{ "Alias": "BlockMove_Step" }"""))
  val value = v.currentOpt[String].get
  val array = toJsonNodeT[ArrayNode](value)
  for (i <- 0 until array.size) array.get(i).get("Alias").asText match {
    case "AddHitDefense_Skill" | "AddHitDefense_EveSkill" | "NoDamage_Skill" | "BlockAction_Step" | "BlockMove_Step" =>
    case _ => newArray.add(array.get(i))
  }
  newArray.toString
}'''                                                         # "[{\"Alias\":\"UseSkill_Step\"}, {\"Alias\":\"BlockAction_Step\"}, {\"Alias\":\"AddHitDefense_BNSkill\", \"CalculationValue\":2, \"Time\":0.7}, {\"Alias\":\"Check_LinkIgnore_Step\"}]"

['.*: ^P_Eve_Sword_Normal_(Light|StrongAttack(7|10)|Finish|DashAttackCombo).*Ex_Finish1$']
NextStepAlias = '''=> v.objName match {
  case "P_Eve_Sword_Normal_FinishAttack4_1_Ex_Finish1" => "P_Eve_Sword_Normal_FinishAttack3_1_Ex_Cast1"
  case "P_Eve_Sword_Normal_FinishAttack3_1_Ex_Finish1" => "P_Eve_Sword_Air_RollingAttack1_1_Ex_Cast1"
  
  case "P_Eve_Sword_Normal_DashAttackCombo1_1_Ex_Finish1" => "P_Eve_Sword_Normal_StrongAttack7_1_Ex_Cast1"
  case "P_Eve_Sword_Normal_StrongAttack7_1_Ex_Finish1" => "P_Eve_Sword_Normal_StrongAttack8_1_Ex_Cast1"

  case "P_Eve_Sword_Normal_LightAttack4_1_Ex_Finish1" => "P_Eve_Sword_Normal_StrongAttack10_1_Ex_Cast1"
  case "P_Eve_Sword_Normal_StrongAttack10_1_Ex_Finish1" => "P_Eve_Sword_Normal_StrongAttack6_1_Ex_Cast1"

  case _ => null
}'''                                                        # null

['.*: ^P_Eve_Sword_(Normal_(Light|Strong|Finish|DashAttackCombo)|Air_RollingAttack).*Ex_Finish1$']
StartSelfEffect = '''=> {
  val newArray = JsonNodeFactory.instance.arrayNode
  newArray.add(toJsonNode("""{ "Alias": "NoDamage_Skill", "Time": 2 }"""))
  newArray.add(toJsonNode("""{ "Alias": "AddHitDefense_Skill", "CalculationValue": 4 }"""))
  newArray.add(toJsonNode("""{ "Alias": "AddHitDefense_EveSkill", "CalculationValue": 4 }"""))
  val value = v.currentOpt[String].get
  val array = toJsonNodeT[ArrayNode](value)
  for (i <- 0 until array.size) array.get(i).get("Alias").asText match {
    case "AddHitDefense_Skill" | "AddHitDefense_EveSkill" | "NoDamage_Skill" | "AddHitDefense_EveSkillDispel" =>
    case _ => newArray.add(array.get(i))
  }
  newArray.toString
}'''
Duration = 0.1
OverrideTargetFilterAlias = "P_Eve_Sword_0500_360_500_HitArea"

['.*: ^P_Eve_Sword_(Normal_(Light|Strong|Finish|DashAttackCombo)|Air_RollingAttack).*Ex_(Cast|Hit).*$']
StartSelfEffect = '''=> {
  val newArray = JsonNodeFactory.instance.arrayNode
  newArray.add(toJsonNode("""{ "Alias": "NoDamage_Skill", "Time": 2 }"""))
  newArray.add(toJsonNode("""{ "Alias": "AddHitDefense_Skill", "CalculationValue": 4 }"""))
  newArray.add(toJsonNode("""{ "Alias": "AddHitDefense_EveSkill", "CalculationValue": 4 }"""))
  newArray.add(toJsonNode("""{ "Alias": "BlockMove_Step" }"""))
  val value = v.currentOpt[String].get
  val array = toJsonNodeT[ArrayNode](value)
  for (i <- 0 until array.size) array.get(i).get("Alias").asText match {
    case "AddHitDefense_Skill" | "AddHitDefense_EveSkill" | "NoDamage_Skill" | "BlockAction_Step" | "BlockMove_Step" =>
    case _ => newArray.add(array.get(i))
  }
  newArray.toString
}'''

['.*: ^P_Eve_Sword_Burst_MassiveAttack.*(Cast|Hit).*$']
StartSelfEffect = '''=> {
  val newArray = JsonNodeFactory.instance.arrayNode
  newArray.add(toJsonNode("""{ "Alias": "NoDamage_Skill", "Time": 2 }"""))
  newArray.add(toJsonNode("""{ "Alias": "AddHitDefense_Skill", "CalculationValue": 4 }"""))
  newArray.add(toJsonNode("""{ "Alias": "AddHitDefense_EveSkill", "CalculationValue": 4 }"""))
  newArray.add(toJsonNode("""{ "Alias": "BlockMove_Step" }"""))
  val value = v.currentOpt[String].get
  val array = toJsonNodeT[ArrayNode](value)
  for (i <- 0 until array.size) array.get(i).get("Alias").asText match {
    case "AddHitDefense_Skill" | "AddHitDefense_EveSkill" | "NoDamage_Skill" | "BlockAction_Step" | "BlockMove_Step" =>
    case _ => newArray.add(array.get(i))
  }
  newArray.toString
}'''

['.*: ^P_Eve_Sword_Burst_MassiveAttack.*Finish.*$']
StartSelfEffect = '''=> {
  val newArray = JsonNodeFactory.instance.arrayNode
  newArray.add(toJsonNode("""{ "Alias": "NoDamage_Skill", "Time": 2 }"""))
  newArray.add(toJsonNode("""{ "Alias": "AddHitDefense_Skill", "CalculationValue": 4 }"""))
  newArray.add(toJsonNode("""{ "Alias": "AddHitDefense_EveSkill", "CalculationValue": 4 }"""))
  newArray.add(toJsonNode("""{ "Alias": "NoReactionSlug_Step" }"""))
  val value = v.currentOpt[String].get
  val array = toJsonNodeT[ArrayNode](value)
  for (i <- 0 until array.size) array.get(i).get("Alias").asText match {
    case "AddHitDefense_Skill" | "AddHitDefense_EveSkill" | "NoDamage_Skill" | "NoReactionSlug_Step" =>
    case _ => newArray.add(array.get(i))
  }
  newArray.toString
}'''
Duration = 1

['.*: ^P_Eve_Sword_Burst_MeleeCombatBuff.*(Cast|Hit|Finish).*$']
StartSelfEffect = '''=> {
  val newArray = JsonNodeFactory.instance.arrayNode
  newArray.add(toJsonNode("""{ "Alias": "NoDamage_Skill", "Time": 2 }"""))
  newArray.add(toJsonNode("""{ "Alias": "AddHitDefense_Skill", "CalculationValue": 4 }"""))
  newArray.add(toJsonNode("""{ "Alias": "AddHitDefense_EveSkill", "CalculationValue": 4 }"""))
  newArray.add(toJsonNode("""{ "Alias": "BlockMove_Step" }"""))
  val value = v.currentOpt[String].get
  val array = toJsonNodeT[ArrayNode](value)
  for (i <- 0 until array.size) array.get(i).get("Alias").asText match {
    case "AddHitDefense_Skill" | "AddHitDefense_EveSkill" | "NoDamage_Skill" | "NoReactionSlug_Step" | "BlockAction_Step" | "BlockMove_Step" =>
    case _ => newArray.add(array.get(i))
  }
  newArray.toString
}'''                                                         # "[{\"Alias\":\"UseSkill_Step\", \"Time\":0.3}, {\"Alias\":\"BlockMove_Step\", \"Time\":0.3}, {\"Alias\":\"BlockSkill_Step\", \"Time\":0.3}, {\"Alias\":\"P_Eve_MeleeCombatBuff_FX\", \"Time\":10}, {\"Alias\":\"P_Eve_MeleeCombatBuff_PhysicAttackPower\"}, {\"Alias\":\"P_Eve_MeleeCombatBuff_AttackSpeed\"}]"
OverrideTargetFilterAlias = "P_Eve_Sword_Burst_MassiveAttack1_1_HitArea"    # "P_Eve_Sword_Burst_MassiveAttack1_1_HitArea"
Duration = 0.1                                               # 1.3

[P_Eve_Tachy_JustParry_StrongAttackCombo1_1_Finish1] # Incursion I β - ++Punishing Edge: ☐, △, △, Hold △
NextStepAlias = "P_Eve_Fusion_Normal_DashAttackCombo1_1_Cast1"
OverrideTargetFilterAlias = "P_Eve_Sword_0500_360_500_HitArea"
Duration = 1

[P_Eve_Fusion_Normal_DashAttackCombo1_1_Finish1] # ... Incursion I β - ++Punishing Edge: ☐, △, △, Hold △
NextStepAlias = "P_Eve_Sword_Burst_FinishAttack1_1_Cast1"
OverrideTargetFilterAlias = "P_Eve_Sword_0500_360_500_HitArea"
Duration = 0.5

[P_Eve_Fusion_JustEvade_LightAttack1_1_Finish1] # Incursion III β - Shield Break: ☐, △, Hold ☐
NextStepAlias = "P_Eve_Sword_Beta_ShieldBreak1_Ex_Cast1"
OverrideTargetFilterAlias = "P_Eve_Sword_0500_360_500_HitArea"
Duration = 0.1

[P_Eve_Sword_Beta_ChainStabCombo1_Ex_Finish1] # Onslaught I β - Quadruplet++: △, △, Hold △
NextStepAlias = "P_Eve_Fusion_JustEvade_LightAttackCombo1_1_Cast1"
OverrideTargetFilterAlias = "P_Eve_Sword_0500_360_500_HitArea"
Duration = 0.5

[P_Eve_Fusion_Skill_Chainstab1_1_Finish1] # Onslaught II β - Fusion Jugdgement Rave++: △, ☐, ☐, Hold △
NextStepAlias = "P_Eve_Sword_Normal_DashAttack3_1_Cast1"
OverrideTargetFilterAlias = "P_Eve_Sword_0500_360_500_HitArea"
Duration = 0.5

[P_Eve_Sword_Normal_DashAttack3_1_Finish1] # Onslaught II β - Fusion Jugdgement Rave++: △, ☐, ☐, Hold △
NextStepAlias = "P_Eve_Fusion_JustEvade_StrongAttackCombo1_1_Cast1"
OverrideTargetFilterAlias = "P_Eve_Sword_0500_360_500_HitArea"
Duration = 0.5

[P_Eve_Sword_Beta_ChargeSlashCombo1_Ex_Finish1] # Onslaught III β - Crescent Slash++: △, ☐, Hold ☐, Hold △
NextStepAlias = "P_Eve_Fusion_JustParry_StrongAttackCombo1_1_Cast1"
OverrideTargetFilterAlias = "P_Eve_Sword_0500_360_500_HitArea"
Duration = 0.1

[P_Eve_Fusion_JustEvade_StrongAttack1_1_Finish1] # Onslaught IV β - ++Descending Break: △, ☐, △, ☐, Hold △
StartSelfEffect = '''=> {
  val newArray = JsonNodeFactory.instance.arrayNode
  newArray.add(toJsonNode("""{ "Alias": "BlockMove_Step" }"""))
  val value = v.currentOpt[String].get
  val array = toJsonNodeT[ArrayNode](value)
  for (i <- 0 until array.size) array.get(i).get("Alias").asText match {
    case "BlockAction_Step" | "BlockMove_Step" =>
    case _ => newArray.add(array.get(i))
  }
  newArray.toString
}'''
NextStepAlias = "P_Eve_Fusion_Normal_FinishAttack1_1_Cast1"
OverrideTargetFilterAlias = "P_Eve_Sword_0500_360_500_HitArea"
Duration = 0.1

[P_Eve_Fusion_Normal_FinishAttack1_1_Finish1] # ... Onslaught IV β - ++Descending Break: △, ☐, △, ☐, Hold △
NextStepAlias = "P_Eve_Sword_Burst_SpinAttack1_1_Cast1"
OverrideTargetFilterAlias = "P_Eve_Sword_0500_360_500_HitArea"
Duration = 0.1

[P_Eve_Sword_Burst_MeleeCombatBuff1_1_Finish1] # Ex Combo S + Scarlet Judgement Cut/Tempest: R1+◯
Duration = 0.5
NextStepAlias = "P_Eve_Fusion_JustParry_LightAttack1_1_Cast1"
OverrideTargetFilterAlias = "P_Eve_Sword_Burst_MassiveAttack1_1_HitArea"

[P_Eve_Fusion_JustParry_LightAttack1_1_Finish1] # ...Ex Combo S + Scarlet Judgement Cut/Tempest: R1+◯
Duration = 0.5
NextStepAlias = "P_Eve_Sword_Normal_DashAttack1_2_Ex_Cast1"
OverrideTargetFilterAlias = "P_Eve_Sword_Burst_MassiveAttack1_1_HitArea"

['.*: ^P_Eve_((Tachy_(Skill_Chainstab|Just(Evade_StrongAttack|Parry_StrongAttackCombo))|Fusion_(Normal_FinishAttack|Normal_DashAttackCombo))_1|Sword_(Beta_(ChainStab|ChargeSlash)Combo1|Normal_(DashAttack1_2|DashAttackCombo1_1))_Ex)_Finish1$']
StartSelfEffect = '''=> {
  val newArray = JsonNodeFactory.instance.arrayNode
  newArray.add(toJsonNode("""{ "Alias": "BlockMove_Step" }"""))
  val value = v.currentOpt[String].get
  val array = toJsonNodeT[ArrayNode](value)
  for (i <- 0 until array.size) array.get(i).get("Alias").asText match {
    case "BlockAction_Step" | "BlockMove_Step" =>
    case _ => newArray.add(array.get(i))
  }
  newArray.toString
}'''

# P_Eve_Fusion_JustEvade_LightAttack1_1_Cast1
# P_Eve_Fusion_JustEvade_StrongAttack1_1_Cast1
# P_Eve_Fusion_JustEvade_StrongAttackCombo1_1_Cast1
# P_Eve_Fusion_JustParry_LightAttack1_1_Cast1
# P_Eve_Fusion_Normal_DashAttackCombo1_1_Cast1
# P_Eve_Fusion_Normal_FinishAttack1_1_Cast1
# P_Eve_Fusion_Skill_Chainstab1_1_Cast1
# P_Eve_Sword_Beta_ChainStabCombo1_Ex_Cast1
# P_Eve_Sword_Beta_ChargeSlashCombo1_Ex_Cast1
# P_Eve_Sword_Burst_FinishAttack1_1_Cast1
# P_Eve_Sword_Burst_SpinAttack1_1_Cast1
# P_Eve_Sword_Normal_DashAttack1_2_Ex_Cast1
# P_Eve_Tachy_JustEvade_LightAttackCombo1_1_Cast1
# P_Eve_Tachy_JustParry_StrongAttackCombo1_1_Cast1
['.*: ^P_Eve_(Fusion_(Just(Evade_(LightAttack|StrongAttack(Combo)?|Parry_LightAttack))|Normal_(DashAttackCombo|FinishAttack)|Skill_Chainstab)1_1|Sword_(Beta_(ChainStab|ChargeSlash)Combo1_Ex|Burst_(Finish|Spin)Attack1_1|Normal_DashAttack1_2_Ex)|Tachy_Just(Evade_LightAttackCombo|Parry_StrongAttackCombo)1_1).*Cast.*$']
StartSelfEffect = '''=> {
  val newArray = JsonNodeFactory.instance.arrayNode
  newArray.add(toJsonNode("""{ "Alias": "BlockMove_Step" }"""))
  val value = v.currentOpt[String].get
  val array = toJsonNodeT[ArrayNode](value)
  for (i <- 0 until array.size) array.get(i).get("Alias").asText match {
    case "BlockAction_Step" | "BlockMove_Step" =>
    case _ => newArray.add(array.get(i))
  }
  newArray.toString
}'''

# P_Eve_Fusion_JustEvade_StrongAttackCombo1_1_Finish1
# P_Eve_Fusion_JustParry_StrongAttackCombo1_1_Finish1
# P_Eve_Sword_Burst_FinishAttack1_1_Finish1
# P_Eve_Sword_Burst_SpinAttack1_1_Finish1
# P_Eve_Tachy_JustEvade_LightAttackCombo1_1_Finish1
['.*: ^P_Eve_(Fusion_Just(Evade|Parry)_StrongAttackCombo|Sword_Burst_(Finish|Spin)Attack|Tachy_JustEvade_LightAttackCombo)1_1_Finish1$']
StartSelfEffect = '''=> {
  val newArray = JsonNodeFactory.instance.arrayNode
  newArray.add(toJsonNode("""{ "Alias": "NoReactionSlug_Step" }"""))
  val value = v.currentOpt[String].orNull
  if (value != null) {
    val array = toJsonNodeT[ArrayNode](value)
    for (i <- 0 until array.size) array.get(i).get("Alias").asText match {
      case "NoReactionSlug_Step" | "BlockAction_Step" =>
      case _ => newArray.add(array.get(i))
    }
  }
  newArray.toString
}'''

[P_Eve_Tachy_Skill_Chainstab1_1_Finish1]
NextStepAlias = "P_Eve_Sword_Normal_DashAttack1_1_Cast1"
OverrideTargetFilterAlias = "P_Eve_Sword_Burst_MassiveAttack1_1_HitArea"
Duration = 0.1
StartSelfEffect = "[{\"Alias\":\"UseSkill_Step\", \"Time\":0.5}, {\"Alias\":\"BlockMove_Step\"}]"

[P_Eve_Sword_Normal_DashAttack1_1_Finish1]
NextStepAlias = "P_Eve_Fusion_Skill_Chainstab1_1_Cast1"
OverrideTargetFilterAlias = "P_Eve_Sword_Burst_MassiveAttack1_1_HitArea"
Duration = 0.1
StartSelfEffect = "[{\"Alias\":\"UseSkill_Step\", \"Time\":0.5}, {\"Alias\":\"BlockMove_Step\"}]"

[P_Eve_Tachy_Skill_ScrewAttack1_1_Finish1]
NextStepAlias = "P_Eve_Fusion_Skill_ScrewAttack1_1_Cast1"
OverrideTargetFilterAlias = "P_Eve_Sword_Burst_MassiveAttack1_1_HitArea"
Duration = 0.1
StartSelfEffect = "[{\"Alias\":\"UseSkill_Step\", \"Time\":0.5}, {\"Alias\":\"BlockMove_Step\"}]"

[P_Eve_Tachy_Skill_SwordAura1_1_Finish1]
NextStepAlias = "P_Eve_Fusion_Skill_SwordAura1_1_Cast1"
OverrideTargetFilterAlias = "P_Eve_Sword_Burst_MassiveAttack1_1_HitArea"
Duration = 0.1
StartSelfEffect = "[{\"Alias\":\"UseSkill_Step\", \"Time\":0.4}, {\"Alias\":\"BlockMove_Step\"}]"

['.*: ^P_Eve_(Fusion|Tachy)_Skill_ParrySlash1_1_Finish2$']
NextStepAlias = "P_Eve_Sword_Burst_MassiveAttack2_1_Cast1"
OverrideTargetFilterAlias = "P_Eve_Sword_Burst_MassiveAttack1_1_HitArea"
Duration = 0.1

['.*: ^P_Eve_Fusion_Skill_.*_Finish.*$']
StartSelfEffect = '''=> {
  val newArray = JsonNodeFactory.instance.arrayNode
  newArray.add(toJsonNode("""{ "Alias": "NoReactionSlug_Step" }"""))
  Option(v.currentOpt[String].get) match {
    case Some(value) =>
      val array = toJsonNodeT[ArrayNode](value)
      for (i <- 0 until array.size) array.get(i).get("Alias").asText match {
        case "NoReactionSlug_Step" | "BlockAction_Step" =>
        case _ => newArray.add(array.get(i))
      }
    case _ =>
  }
  newArray.toString
}'''