['.*: ^(?!.*_Ex.*$)P_Eve_Sword_Normal_(Light|Strong)Attack.*_Cast.*$']
StartSelfEffect = '''=> {
  val newArray = JsonNodeFactory.instance.arrayNode
  newArray.add(toJsonNode("""{ "Alias": "AddHitDefense_Skill", "CalculationValue": 2 }"""))
  newArray.add(toJsonNode("""{ "Alias": "AddHitDefense_EveSkill", "CalculationValue": 2 }"""))
  val value = v.currentOpt[String].get
  val array = toJsonNodeT[ArrayNode](value)
  for (i <- 0 until array.size) array.get(i).get("Alias").asText match {
    case "AddHitDefense_Skill" | "AddHitDefense_EveSkill" =>
    case _ => newArray.add(array.get(i))
  }
  newArray.toString
}'''

[P_Eve_Sword_JustParry_LightAttackCombo2_1_Cast1]
StartSelfEffect = '''=> {
  val newArray = JsonNodeFactory.instance.arrayNode
  newArray.add(toJsonNode("""{ "Alias": "AddHitDefense_Skill", "CalculationValue": 2 }"""))
  newArray.add(toJsonNode("""{ "Alias": "AddHitDefense_EveSkill", "CalculationValue": 2 }"""))
  val value = v.currentOpt[String].get
  val array = toJsonNodeT[ArrayNode](value)
  for (i <- 0 until array.size) array.get(i).get("Alias").asText match {
    case "AddHitDefense_Skill" | "AddHitDefense_EveSkill" =>
    case _ => newArray.add(array.get(i))
  }
  newArray.toString
}'''

[P_Eve_Sword_Beta_ChargeSlashCombo1_Ex_Cast1]
StartSelfEffect = '''=> {
  val newArray = JsonNodeFactory.instance.arrayNode
  newArray.add(toJsonNode("""{ "Alias": "AddHitDefense_Skill", "CalculationValue": 2 }"""))
  newArray.add(toJsonNode("""{ "Alias": "AddHitDefense_EveSkill", "CalculationValue": 2 }"""))
  val value = v.currentOpt[String].get
  val array = toJsonNodeT[ArrayNode](value)
  for (i <- 0 until array.size) array.get(i).get("Alias").asText match {
    case "AddHitDefense_Skill" | "AddHitDefense_EveSkill" =>
    case _ => newArray.add(array.get(i))
  }
  newArray.toString
}'''

[P_Eve_Sword_Beta_ShieldBreak1_Ex_Cast1]
StartSelfEffect = '''=> {
  val newArray = JsonNodeFactory.instance.arrayNode
  newArray.add(toJsonNode("""{ "Alias": "AddHitDefense_Skill", "CalculationValue": 2 }"""))
  newArray.add(toJsonNode("""{ "Alias": "AddHitDefense_EveSkill", "CalculationValue": 2 }"""))
  newArray.add(toJsonNode("""{ "Alias": "P_Eve_SkillTree_ShieldBreak_ShieldAttackPower" }"""))
  val value = v.currentOpt[String].get
  val array = toJsonNodeT[ArrayNode](value)
  for (i <- 0 until array.size) array.get(i).get("Alias").asText match {
    case "AddHitDefense_Skill" | "AddHitDefense_EveSkill" | "P_Eve_SkillTree_ShieldBreak_ShieldAttackPower" =>
    case _ => newArray.add(array.get(i))
  }
  newArray.toString
}'''

['.*: ^P_Eve_Sword_Burst_MassiveAttack[1-2]_1_Cast1$']
StartSelfEffect = '''=> {
  val newArray = JsonNodeFactory.instance.arrayNode
  newArray.add(toJsonNode("""{ "Alias": "NoDamage_Skill", "Time": 3.4 }"""))
  newArray.add(toJsonNode("""{ "Alias": "AddHitDefense_Skill", "CalculationValue": 2 }"""))
  newArray.add(toJsonNode("""{ "Alias": "AddHitDefense_EveSkill", "CalculationValue": 2 }"""))
  val value = v.currentOpt[String].get
  val array = toJsonNodeT[ArrayNode](value)
  for (i <- 0 until array.size) array.get(i).get("Alias").asText match {
    case "AddHitDefense_Skill" | "AddHitDefense_EveSkill" | "NoDamage_Skill" =>
    case _ => newArray.add(array.get(i))
  }
  newArray.toString
}'''


['.*: ^P_Eve_Sword_Burst_MassiveAttack[1-2]_1_Cast2$']
StartSelfEffect = '''=> {
  val newArray = JsonNodeFactory.instance.arrayNode
  newArray.add(toJsonNode("""{ "Alias": "NoDamage_Skill", "Time": 1 }"""))
  newArray.add(toJsonNode("""{ "Alias": "AddHitDefense_Skill", "CalculationValue": 2 }"""))
  newArray.add(toJsonNode("""{ "Alias": "AddHitDefense_EveSkill", "CalculationValue": 2 }"""))
  val value = v.currentOpt[String].get
  val array = toJsonNodeT[ArrayNode](value)
  for (i <- 0 until array.size) array.get(i).get("Alias").asText match {
    case "AddHitDefense_Skill" | "AddHitDefense_EveSkill" | "NoDamage_Skill" =>
    case _ => newArray.add(array.get(i))
  }
  newArray.toString
}'''

['.*: ^P_Eve_Sword_Burst_MassiveAttack[1-2]_1_Finish1$']
StartSelfEffect = '''=> {
  val newArray = JsonNodeFactory.instance.arrayNode
  newArray.add(toJsonNode("""{ "Alias": "NoDamage_Skill", "Time": 2 }"""))
  newArray.add(toJsonNode("""{ "Alias": "NoReactionSlug_Step" }"""))
  newArray.add(toJsonNode("""{ "Alias": "AddHitDefense_Skill", "CalculationValue": 2 }"""))
  newArray.add(toJsonNode("""{ "Alias": "AddHitDefense_EveSkill", "CalculationValue": 2 }"""))
  val value = v.currentOpt[String].get
  val array = toJsonNodeT[ArrayNode](value)
  for (i <- 0 until array.size) array.get(i).get("Alias").asText match {
    case "AddHitDefense_Skill" | "AddHitDefense_EveSkill" | "NoDamage_Skill" | "NoReactionSlug_Step" =>
    case _ => newArray.add(array.get(i))
  }
  newArray.toString
}'''